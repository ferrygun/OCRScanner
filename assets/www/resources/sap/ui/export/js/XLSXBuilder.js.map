{"version":3,"sources":["webpack:///XLSXBuilder.js","webpack:///webpack/bootstrap 905e76c5673bd8746125","webpack:///./core/src/xml/XMLNode.js","webpack:///./core/src/binding/type/Type.js","webpack:///./core/src/data/Cell.js","webpack:///./core/src/binding/type/Numeric.js","webpack:///./core/src/xml/XMLElement.js","webpack:///./core/src/binding/Column.js","webpack:///./core/src/binding/type/CalendarDate.js","webpack:///./core/src/binding/type/BooleanType.js","webpack:///./core/src/binding/type/Currency.js","webpack:///./core/src/data/SharedStrings.js","webpack:///./core/src/binding/type/Text.js","webpack:///./core/src/data/Row.js","webpack:///./core/src/XLSXBuilder.js","webpack:///./core/src/objects/App.js","webpack:///./core/src/xml/XMLAttribute.js","webpack:///./core/src/data/SharedString.js","webpack:///./core/src/binding/ColumnConfiguration.js","webpack:///./core/src/objects/ContentTypes.js","webpack:///./core/src/objects/Core.js","webpack:///./core/src/objects/Relationships.js","webpack:///./core/src/data/Sheet.js","webpack:///./core/src/style/Styles.js","webpack:///./core/src/style/Style.js","webpack:///./core/src/style/Alignment.js","webpack:///./core/src/style/Font.js","webpack:///./core/src/style/Fill.js","webpack:///./core/src/style/Border.js","webpack:///./core/src/style/NumberFormat.js","webpack:///./core/src/objects/Workbook.js"],"names":["XLSXBuilder","modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","XMLNode","oConfig","j","config","XMLElement","this","tag","value","root","writable","attributes","childs","length","addAttribute","properties","addChild","XMLAttribute","create","constructor","processingInformation","attribute","push","id","node","remove","sProperty","index","referencedElement","aAggregation","indexOf","splice","serialize","sSerialized","xmlEncode","Type","styleId","_createConfiguration","Error","getStyleId","styles","addStyle","registerAt","oStyles","getValue","oData","Cell","oType","metadata","_applyType","CalendarDate","Numeric","BooleanType","Currency","SharedStrings","DataType","Boolean","Date","InlineString","Number","SharedString","FormularString","_JsDateToExcel","oDate","getTime","type","isCustomFormatted","bindingType","setStyle","nStyle","style","setReference","sReference","match","reference","setValue","oBusinessObject","date","shared","_isValuePresent","text","toLowerCase","parseInt","getInstance","insert","data","unit","unitProperty","delimiter","scale","styleIds","DEFAULT","numberFormat","builtin","1","2","3","4","9","10","11","12","13","37","38","39","40","48","key","result","template","format","getPrototypeOf","sValue","_replace","replace","Column","oColumnData","align","Align","Left","label","width","_initType","Text","Center","Right","sType","calendar","displayUnit","trueValue","falseValue","getCell","cell","bind","14","15","16","17","18","19","20","21","22","45","46","47","DEFAULT_SCALE","DIGITS","ADP","AFN","ALL","AMD","BHD","BIF","BYR","CAD","CHF","CLF","CLP","COP","CRC","CZK","DJF","ESP","GNF","GYD","HUF","IDR","IQD","IRR","ISK","ITL","JOD","JPY","KMF","KPW","KRW","KWD","LAK","LBP","LUF","LYD","MGA","MGF","MMK","MNT","MRO","MUR","OMR","PKR","PYG","RSD","RWF","SLL","SOS","STD","SYP","TMM","TND","TRL","TWD","TZS","UGX","UYI","UZS","VND","VUV","XAF","XOF","XPF","YER","ZMK","ZWD","instance","Map","map","has","_shared","size","set","font","fill","regex","every","exec","Row","getColumnReferenceByIndex","nIndex","String","fromCharCode","Math","floor","_updateSpans","spans","addCell","oCell","count","aBinding","oContext","Array","objects","Styles","sheet","Sheet","binding","ColumnConfiguration","app","App","core","Core","ContentTypes","Relationships","Workbook","build","files","zip","fileConfig","FileType","xmlObject","relation","zipConfig","path","relationships","target","JSZip","addRelationship","file","compression","support","nodebuffer","generateAsync","Promise","resolve","reject","generate","append","aData","array","shift","application","version","suffix","prefix","aColumnConfig","column","columns","row","_initBinding","getHeader","bold","color","forEach","title","modifiedBy","toISOString","sTarget","oColumnConfiguration","_createCols","_createHeader","MAX_ROWS","col","minWidth","_columns","_calculateColumnWidth","max","nCharacters","_appendRow","oRow","dimension","filter","addFill","Style","Font","Fill","Border","NumberFormat","fontId","fillId","borderId","numberFormatId","addFont","addBorder","border","_isBuiltin","addNumberFormat","setFontId","setFillId","getBorderId","setNumberFormatId","_addToAggregation","cellXfs","oNewItem","existingItem","equals","addColor","sHexColor","colors","mru","oFont","fonts","oFill","fills","getFill","oBorder","borders","numberFormats","setId","ID_OFFSET","getId","Alignment","family","getAlignment","getFontId","getFillId","getNumberFormatId","setAlignment","sAlign","_apply","horizontal","contains","nFontId","nFillId","setBorderId","sBorderId","nNumFmtId","nId","applyProperty","oStyle","_contains","oAggregation","contained","vertical","Top","Middle","Bottom","setName","setSize","setFamily","setBold","DEFAULT_SIZE","DEFAULT_NAME","getName","getSize","isBold","getColor","getFamily","valueAttribute","bBold","nFamily","sName","nSize","isNaN","setFill","setType","DEFAULT_TYPE","getType","rgb","substring","sColor","reset","test","BUILTIN_IDS","formatId","getFormat","sId","iId","setFormat","sFormat","oNumberFormat","addSheet","sheets"],"mappings":"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","file":"XLSXBuilder.js","sourcesContent":["var XLSXBuilder =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 12);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLElement = __webpack_require__(4);\r\nvar XMLAttribute = __webpack_require__(14);\r\n\r\n/**\r\n * JSON representation of XML nodes. Each node has a tag an can have multiple {@link XMLAttribute} entries assigned.\r\n * It can also have multiple child {@link XMLNode} elements assigned. The node can contain a value.\r\n *\r\n * @param {object|string} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.tag - String representation of the XML tag.\r\n * @param {object[]} [oConfig.attributes] - Aggregation for adding {@link XMLAttributes} to the current node.\r\n * @param {object[]} [oConfig.properties] - Aggregation for adding {@link XMLNode} objects as child objects to this node\r\n * @param {string} [oConfig.value] - String value inside the XML tag.\r\n * @class\r\n * @module xml/XMLNode\r\n */\r\nfunction XMLNode(oConfig) {\r\n\tvar i, j, config;\r\n\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\t/* Shorthand functionality to simply assign the XMLNode tag name instead of a configuration object */\r\n\tconfig = typeof oConfig === 'string' ? {tag: oConfig} : oConfig;\r\n\r\n\tObject.defineProperty(this, 'root', {value: !!config.root, writable: false});\r\n\tthis.tag = typeof config.tag == 'string' ? config.tag : '';\r\n\tthis.attributes = [];\r\n\tthis.childs = [];\r\n\r\n\t/* Initialize the XML node by filling the aggregations if present */\r\n\tif (config.attributes) {\r\n\t\tfor (i = 0; i < config.attributes.length; i++) {\r\n\t\t\tthis.addAttribute(config.attributes[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tif (config.properties) {\r\n\t\tfor (j = 0; j < config.properties.length; j++) {\r\n\t\t\tthis.addChild(config.properties[j]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXMLNode.prototype = Object.create(XMLElement.prototype);\r\nXMLNode.prototype.constructor = XMLNode;\r\n\r\nXMLNode.processingInformation = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\r\n\r\n\r\n/**\r\n * Adds the provided XMLAttribute object to the XMLNode.\r\n * If no XMLAttribute is provided it will create one instead.\r\n * The method returns the XMLAttribute for chaining.\r\n *\r\n * @function addAttribute\r\n * @param {Object} oConfig - XMLAttribute or configuration object that represents a XMLAttribute\r\n * @returns {Object} - An instance of XMLAttribute that was added to this node\r\n */\r\nXMLNode.prototype.addAttribute = function(oConfig) {\r\n\tvar attribute = oConfig instanceof XMLAttribute ? oConfig : new XMLAttribute(oConfig);\r\n\r\n\tthis.attributes.push(attribute);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: attribute, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn attribute;\r\n};\r\n\r\n\r\n/**\r\n * Adds the provided XMLNode object as child to the current XMLNode.\r\n * If no XMLNode is provided it will create one instead.\r\n * The method returns the XMLNode for chaining.\r\n *\r\n * @function addChild\r\n * @param {Object} oConfig - XMLNode or configuration object that represents a XMLNode\r\n * @returns {object} - An instance of XMLNode that was added to this node\r\n */\r\nXMLNode.prototype.addChild = function(oConfig) {\r\n\r\n\t/* Additional Attributes of the child node will be added in the Constructor */\r\n\tvar node = oConfig instanceof XMLNode ? oConfig : new XMLNode(oConfig);\r\n\r\n\tthis.childs.push(node);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: node, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\n\r\n/**\r\n * Removes the property from this object and also deletes the\r\n * referenced item within the child nodes or attributes\r\n * aggregation.\r\n *\r\n * The method returns the previously referenced object or null if\r\n * the property name is not present on this particular XMLNode or\r\n * if no item is referenced.\r\n *\r\n * Builtin properties of XMLNode cannot be removed with this\r\n * function. These are \"root\", \"tag\", \"attributes\", \"childs\",\r\n * \"value\".\r\n *\r\n * @param {string} sProperty - Name of the property that should be removed\r\n * @returns {XMLNode|XMLAttribute|null} - The referenced object that gets removed as well\r\n */\r\nXMLNode.prototype.remove = function(sProperty) {\r\n\tvar index, referencedElement, aAggregation;\r\n\r\n\t/* Only proceed if property is present */\r\n\tif (!(sProperty in this)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treferencedElement = this[sProperty];\r\n\r\n\t/* Check if referenced element is a XMLAttribute */\r\n\tif (referencedElement instanceof XMLAttribute) {\r\n\t\taAggregation = this.attributes;\r\n\t} else if (referencedElement instanceof XMLNode && !(sProperty in new XMLNode(''))) {\r\n\t\taAggregation = this.childs;\r\n\t} else {\r\n\r\n\t\t/* Early return if referenced element is neither an XMLAttribute nor XMLNode */\r\n\t\treturn null;\r\n\t}\r\n\r\n\tindex = aAggregation.indexOf(referencedElement);\r\n\taAggregation.splice(index, 1); // It is ensured that index > -1 otherwise #addChild or #addAttribute fail\r\n\tdelete this[sProperty];\r\n\r\n\treturn referencedElement;\r\n};\r\n\r\n/**\r\n * Allows recursive serialization of the object and its descendants. If the XMLNode is marked as root node,\r\n * it will automatically add the XML processing information in front of the serialized representation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLNode.\r\n */\r\nXMLNode.prototype.serialize = function() {\r\n\tvar sSerialized, i, j;\r\n\r\n\tsSerialized = (this.root ? XMLNode.processingInformation : '') + '<' + this.tag;\r\n\r\n\t/* Insert attributes including namespace information */\r\n\tfor (i = 0; i < this.attributes.length; i++) {\r\n\t\tsSerialized += this.attributes[i].serialize();\r\n\t}\r\n\r\n\t/* Insert child nodes and value */\r\n\tif (this.childs.length || this.value || typeof this.value === 'number') {\r\n\t\tsSerialized += '>';\r\n\r\n\t\tfor (j = 0; j < this.childs.length; j++) {\r\n\t\t\tsSerialized += typeof this.childs[j] === 'string' ? this.childs[j] : this.childs[j].serialize();\r\n\t\t}\r\n\t\tsSerialized += this.xmlEncode(this.value);\r\n\r\n\t\tsSerialized += '</' + this.tag + '>';\r\n\t} else {\r\n\r\n\t\t/* Shorthand tag support */\r\n\t\tsSerialized += '/>';\r\n\t}\r\n\r\n\treturn sSerialized;\r\n};\r\n\r\nmodule.exports = XMLNode;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\r\n * The Type class defines a supported data type, like strings,\r\n * numeric values, decimals, dates, currencies and so on. It is NOT\r\n * part of the XML representation of the generated Excel document.\r\n *\r\n * This class is marked as abstract therefore only its sub-classes\r\n * should be used.\r\n *\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction Type() {\r\n\tthis.styleId = null;\r\n}\r\n\r\n/**\r\n * Creates the type specific configuration that is used to register\r\n * its corresponding style in the Styles class.\r\n *\r\n * @abstract\r\n * @private\r\n */\r\nType.prototype._createConfiguration = function() {\r\n\tthrow new Error('Abstract method must be implemented by its subclass!');\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @returns {number} - ID of the registered Style\r\n */\r\nType.prototype.getStyleId = function() {\r\n\tif (this.styleId === null) {\r\n\t\tthis.styleId = this.styles.addStyle(this._createConfiguration());\r\n\t}\r\n\r\n\treturn this.styleId;\r\n};\r\n\r\n/**\r\n * Registers the Style configuration of this Type in the given Styles\r\n * class.\r\n *\r\n * @param {Styles} oStyles - Styles instance where the Type specific styling will be registered\r\n */\r\nType.prototype.registerAt = function(oStyles) {\r\n\tthis.styles = oStyles;\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type.\r\n *\r\n * @param {string} property - Name of the property that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nType.prototype.getValue = function(property, oData) {\r\n\treturn oData[property];\r\n};\r\n\r\nmodule.exports = Type;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode\t\t \t= __webpack_require__(0),\r\n\tCalendarDate \t= __webpack_require__(6),\r\n\tNumeric \t\t= __webpack_require__(3),\r\n\tBooleanType \t= __webpack_require__(7),\r\n\tCurrency \t\t= __webpack_require__(8),\r\n\tSharedStrings   = __webpack_require__(9);\r\n\r\n/**\r\n * The Cell class represents a single cell within the spreadsheet\r\n * that has to be assigned to a particular row. A Cell stores\r\n * information supporting several types of data.\r\n *\r\n * @param {Type} oType - The data type of the cell\r\n * @class\r\n */\r\nfunction Cell(oType) {\r\n\tXMLNode.call(this, Cell.metadata);\r\n\r\n\tthis._applyType(oType);\r\n}\r\n\r\nCell.prototype = Object.create(XMLNode.prototype);\r\nCell.prototype.constructor = Cell;\r\n\r\nCell.DataType = {\r\n\tBoolean: 'b',\r\n\tDate: 'd',\r\n\tInlineString: 'inlineStr', // We do not support inline strings\r\n\tNumber: 'n',\r\n\tSharedString: 's',\r\n\tFormularString: 'str'\r\n};\r\n\r\n/**\r\n * Converts a JavaScript Date object to an Office Open XML date\r\n * representation. Office Open XML date epoch starts at 00.01.1900\r\n * which is 31.12.1899 and is represented as a number of days since\r\n * beginning of the epoch.\r\n *\r\n * The Javascript Date epoch starts at 01.01.1970 and is represented\r\n * as a number of milliseconds before or after the beginning of the\r\n * epoch.\r\n *\r\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\r\n * 25567. According to the wrong offset in Excel (31.12.1899 instead\r\n * of 01.01.1900) and the known leap year bug in Excel, we need to\r\n * add two additional days.\r\n *\r\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\r\n *\r\n *\r\n * @param {Object} oDate - JavaScript Date object\r\n * @returns {number} - Amount of days since 01.01.1900\r\n * @private\r\n */\r\nCell._JsDateToExcel = function(oDate) {\r\n\treturn (oDate.getTime() / (86400 * 1000)) + (25567 + 2);\r\n};\r\n\r\n\r\nCell.metadata = {\r\n\ttag: 'c',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'style',\r\n\t\t\tname: 's',\r\n\t\t\tvalue: '0' // Default style id\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 'v'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Applies the given type to the current Cell and maps to the\r\n * corresponding Office Open XML type definition.\r\n *\r\n * @param {Type} oType - Value of type {@link Type}\r\n * @private\r\n */\r\nCell.prototype._applyType = function(oType) {\r\n\tObject.defineProperty(this, 'type', { value: Cell.DataType.SharedString, writable: true });\r\n\r\n\tswitch (oType.constructor) {\r\n\t\tcase CalendarDate:\r\n\t\t\tthis.type = Cell.DataType.Date;\r\n\t\t\tbreak;\r\n\t\tcase Numeric:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\t\t\tbreak;\r\n\t\tcase BooleanType:\r\n\t\t\tthis.type = Cell.DataType.Boolean;\r\n\r\n\t\t\tif (!oType.isCustomFormatted()) {\r\n\t\t\t\tthis.addAttribute({\r\n\t\t\t\t\tname: 't',\r\n\t\t\t\t\tvalue: Cell.DataType.Boolean\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\tcase Currency:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\t\t\tbreak;\r\n\t\tdefault: // Text is the default case\r\n\t\t\tthis.addAttribute({\r\n\t\t\t\tname: 't',\r\n\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\r\n\t\t\t});\r\n\t\t\tthis.type = Cell.DataType.SharedString;\r\n\t}\r\n\r\n\tthis.bindingType = oType;\r\n};\r\n\r\n/**\r\n * Applies the specified Style to the cell.\r\n *\r\n * @param {number|string} nStyle - Instance of Excel.objects.Style\r\n */\r\nCell.prototype.setStyle = function(nStyle) {\r\n\tthis.style.value = nStyle;\r\n};\r\n\r\n/**\r\n * Applies the specified cell location as reference. The reference\r\n * must match the regular expression of Open Document SpreadsheetML\r\n * sheet format. Starting with at least one uppercase letter for the\r\n * column followed by a number without leading zeros for the row.\r\n * [A-Z]+[1-9]+[0-9]*\r\n *\r\n * @param {string} sReference - Reference of the cells' location\r\n */\r\nCell.prototype.setReference = function(sReference) {\r\n\tif (typeof sReference != 'string'\r\n\t\t|| !sReference.match(/^[A-Z]+[1-9]+[0-9]*$/g)) {\r\n\t\tthrow new Error('The given Cell reference \"' + sReference + '\" does not match the reference pattern.');\r\n\t}\r\n\r\n\tthis.reference.value = sReference;\r\n};\r\n\r\n/**\r\n * Assigns the value to the current Cell. The method requires either\r\n * an shared String proxy object or an inline String. This method can\r\n * only be called once per Cell!\r\n *\r\n * @param {(string|Array)} sProperty - single property or Array of properties\r\n * @param {Object} oBusinessObject - BusinessObject that gets bound to this Cell\r\n */\r\nCell.prototype.setValue = function(sProperty, oBusinessObject) {\r\n\tvar date, shared, value;\r\n\r\n\tvalue = this.bindingType.getValue(sProperty, oBusinessObject);\r\n\r\n\tif (!this._isValuePresent(value)) {\r\n\r\n\t\t/*\r\n\t\t * We need to clear the value due to the fact\r\n\t\t * that we are re-using the Cell for each row\r\n\t\t */\r\n\t\tthis.text.value = '';\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tswitch (this.type) {\r\n\t\tcase Cell.DataType.Number:\r\n\t\t\tthis.text.value = value;\r\n\t\t\tbreak;\r\n\r\n\t\tcase Cell.DataType.Boolean:\r\n\r\n\t\t\t/* String representations other than \"true\" will result in the boolean value false */\r\n\t\t\tif (typeof value === 'string') {\r\n\t\t\t\tvalue = value.toLowerCase() === 'true';\r\n\t\t\t}\r\n\t\t\tthis.text.value = value ? '1' : '0';\r\n\t\t\tbreak;\r\n\r\n\t\tcase Cell.DataType.Date:\r\n\t\t\tif (value instanceof Date) {\r\n\t\t\t\tdate = value;\r\n\t\t\t} else if (typeof value === 'number') {\r\n\t\t\t\tdate = new Date(value);\r\n\t\t\t} else {\r\n\t\t\t\tdate = new Date(parseInt(value, 10));\r\n\t\t\t}\r\n\r\n\t\t\tthis.text.value = Cell._JsDateToExcel(date);\r\n\t\t\t// TODO implement a fallback if the date is before 01.01.1900\r\n\t\t\t// Check if date is before new Date(-2208988800000) which is UTC 01.01.1900 00:00:00\r\n\t\t\tbreak;\r\n\r\n\t\tdefault: // SharedString is the default case\r\n\t\t\tshared = SharedStrings.getInstance();\r\n\t\t\tthis.text.value = shared.insert(value);\r\n\t}\r\n\r\n\t/*\r\n\t * Forces a style update once the value changed. This allows cell\r\n\t * specific styles for currency types. Due to the fact that the\r\n\t * Style ID gets cached within the Type, there is no performance\r\n\t * impact even on large data sets.\r\n\t */\r\n\tthis.setStyle(this.bindingType.getStyleId(oBusinessObject));\r\n};\r\n\r\n/**\r\n * Checks whether there is a value provided or not. Allowed values\r\n * are Stringsas well as numeric and boolean values. Empty Strings\r\n * will be evaluated as no value, but the numeric value 0 is a value.\r\n *\r\n * @param {(string|number|boolean|Array)} data - The value that gets checked\r\n * @returns {boolean} - true if a value is present, false if not\r\n * @private\r\n */\r\nCell.prototype._isValuePresent = function(data) {\r\n\treturn ((typeof data === 'string' && !!data)\r\n\t\t|| typeof data === 'number'\r\n\t\t|| typeof data === 'boolean'\r\n\t\t|| data instanceof Date);\r\n};\r\n\r\nmodule.exports = Cell;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(1);\r\n\r\n/**\r\n * The Numeric class represents a numeric data type. Numeric data can\r\n * handle several options like thousands delimiter, decimal (scale)\r\n * and different types like 'percent' and 'exponential'.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {boolean} [oConfig.delimiter] - Indicates if a thousands delimiter should be used\r\n * @param {number} [oConfig.scale] - Defines the amount of decimals\r\n * @param {string} [oConfig.type] - Applies a specific type like 'exponential' or 'percent'\r\n * @param {string} [oConfig.unit] - Specifies a particular unit of measurement\r\n * @param {string} [oConfig.unitProperty] - Specifies a property that contains the unit of measurement\r\n * @constructor\r\n */\r\nfunction Numeric(oConfig) {\r\n\tType.call(this);\r\n\r\n\tthis.unit = oConfig ? oConfig.unit : null;\r\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\r\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\r\n\tthis.scale = oConfig ? oConfig.scale : null;\r\n\r\n\tthis.styleIds = {};\r\n}\r\n\r\nNumeric.prototype = Object.create(Type.prototype);\r\nNumeric.prototype.constructor = Numeric;\r\n\r\nNumeric.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\nNumeric.builtin = {\r\n\t1: '0',\r\n\t2: '0.00',\r\n\t3: '#,##0',\r\n\t4: '#,##0.00',\r\n\t9: '0%',\r\n\t10: '0.00%',\r\n\t11: '0.00E+00',\r\n\t12: '# ?/?',\r\n\t13: '# ??/??',\r\n\t37: '#,##0;(#,##0)',\r\n\t38: '#,##0;[Red](#,##0)',\r\n\t39: '#,##0.00;(#,##0.00)',\r\n\t40: '#,##0.00;[Red](#,##0.00)',\r\n\t48: '##0.0E+0'\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @param {Object} oData - Business object that contains additional data that is used for the formatting\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @private\r\n */\r\nNumeric.prototype._createConfiguration = function(oData) {\r\n\tvar i, key, result,\r\n\t\ttemplate = Numeric.builtin[1],\r\n\t\tunit = '';\r\n\r\n\tif (!this.delimiter && typeof this.scale !== 'number') {\r\n\t\treturn Numeric.DEFAULT;\r\n\t}\r\n\r\n\tif (this.delimiter) {\r\n\t\ttemplate = '#,##' + template;\r\n\t}\r\n\r\n\t/* Add decimal*/\r\n\tif (typeof this.scale === 'number' && this.scale > 0) {\r\n\t\ttemplate += '.';\r\n\r\n\t\tfor (i = 0; i < this.scale; i++) {\r\n\t\t\ttemplate += '0';\r\n\t\t}\r\n\t}\r\n\r\n\t/* Obtain unit of measurement if available */\r\n\tif (typeof this.unitProperty === 'string' && oData) {\r\n\t\tunit = ' \"' + oData[this.unitProperty] + '\"';\r\n\t} else if (typeof this.unit === 'string') {\r\n\t\tunit = ' \"' + this.unit + '\"';\r\n\t}\r\n\r\n\t/* Apply Unit */\r\n\ttemplate += unit;\r\n\r\n\tresult = {\r\n\t\tnumberFormat: {\r\n\t\t\tformat: template\r\n\t\t}\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in Numeric.builtin) {\r\n\t\tif (Numeric.builtin[key] === template) {\r\n\t\t\tresult.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for the UoM\r\n * @returns {number} - ID of the registered Style\r\n */\r\nNumeric.prototype.getStyleId = function(oData) {\r\n\tvar styleId, unit;\r\n\r\n\t/* Handle simple numeric without unitProperty */\r\n\tif (!this.unitProperty) {\r\n\t\treturn Object.getPrototypeOf(Numeric.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tunit = oData[this.unitProperty];\r\n\tstyleId = this.styleIds[unit];\r\n\r\n\tif (typeof styleId === 'undefined') {\r\n\t\tthis.styleIds[unit] = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleIds[unit];\r\n};\r\n\r\nmodule.exports = Numeric;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n/**\r\n * The XMLElement is an abstract base class that can store a\r\n * particular value and escape XML specific characters.\r\n *\r\n * @param {Object} oConfig - Configuration object that contains the value of this XML Element\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction XMLElement(oConfig) {\r\n\tthis.value = oConfig && oConfig.value ? oConfig.value : '';\r\n}\r\n\r\n/**\r\n * Escapes the given String value to fulfill the requirements of\r\n * XML encoded characters. If the String does not contain any\r\n * character that needs to be encoded, the original String will\r\n * be returned.\r\n *\r\n * This significantly increases the performance because the\r\n * initial regular expression match is much faster than the\r\n * String replace function. We assume that only a few Strings\r\n * need to be encoded.\r\n *\r\n * The following characters need to be encoded:\r\n * < (lower than)\r\n * > (greater than)\r\n * \" (quotes)\r\n * ' (apostrophe)\r\n * & (ampersand)\r\n *\r\n * @param {string} sValue - The value that needs to be XML encoded\r\n * @returns {string} - XML encoded String\r\n */\r\nXMLElement.prototype.xmlEncode = function(sValue) {\r\n\treturn typeof sValue === 'string' && sValue.match(/[><\"'&]+/) !== null ? this._replace(sValue) : sValue;\r\n};\r\n\r\n/**\r\n * @see _xmlEncode\r\n * @param {string} sValue - The string that contains characters that needs to be replaced\r\n * @returns {string} - XML encoded String\r\n * @private\r\n */\r\nXMLElement.prototype._replace = function(sValue) {\r\n\r\n\t/**\r\n\t * Perform ampersand replacement first to avoid encoding the\r\n\t * control ampersand of other encoded characters.\r\n\t *\r\n\t * i.E. >& should be encoded as &gt;&amp; instead of &amp;gt;&amp;\r\n\t */\r\n\treturn sValue\r\n\t\t.replace(/&/g, '&amp;')\r\n\t\t.replace(/</g, '&lt;')\r\n\t\t.replace(/>/g, '&gt;')\r\n\t\t.replace(/\"/g, '&quot;')\r\n\t\t.replace(/'/g, '&apos;');\r\n};\r\n\r\nmodule.exports = XMLElement;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Cell\t\t\t= __webpack_require__(2),\r\n\tCalendarDate \t= __webpack_require__(6),\r\n\tNumeric \t\t= __webpack_require__(3),\r\n\tCurrency \t\t= __webpack_require__(8),\r\n\tBooleanType \t= __webpack_require__(7),\r\n\tText\t\t \t= __webpack_require__(10);\r\n\r\n/**\r\n * The Column class represents the field type of columns. It handles\r\n * styling, data types and data binding.\r\n *\r\n * @param {(Object|string)} oData - Data object representing the Column configuration\r\n * @param {string} oData.property - References the data object property that is bound as value for this column\r\n * @param {string} [oData.align] - Optional alignment. Default: Column.Align.Left\r\n * @param {string} [oData.label] - Optional column label that will be shown in the header row\r\n * @param {string} [oData.type] - Optional data type for this column. Default: Column.Type.Text\r\n * @param {string} [oData.width] - Optional width of the\r\n * @param {Styles} oStyles - Styles collection that is needed to register each Style a Column uses\r\n * @class\r\n * @module binding/Column\r\n */\r\nfunction Column(oData, oStyles) {\r\n\tvar oColumnData;\r\n\r\n\t/* Fallback assignment if only a key is provided */\r\n\toColumnData = typeof oData === 'string' ? {property: oData} : oData;\r\n\tif (!oColumnData || !oColumnData.property) { throw new Error('The property for the column is not defined'); }\r\n\r\n\tthis.align = oColumnData.align ? oColumnData.align : Column.Align.Left;\r\n\tthis.property = oColumnData.property;\r\n\tthis.label = oColumnData.label ? oColumnData.label : oColumnData.property;\r\n\tthis.width = oColumnData.width;\r\n\tthis.styles = oStyles;\r\n\tthis.type = this._initType(oColumnData);\r\n}\r\n\r\nColumn.Align = {\r\n\tLeft: 'left',\r\n\tCenter: 'center',\r\n\tRight: 'right'\r\n};\r\n\r\n/**\r\n * Initializes the data type for this Column. Type specific\r\n * formatting information will be evaluated and applied.\r\n *\r\n * @param {Object} oData - Configuration object for this Column that also contains type and formatting information\r\n * @param {string} oData.type - Specifies the data type\r\n * @param {boolean} [oData.delimiter] - Specifies if a thousands delimiter is shown\r\n * @param {number} [oData.scale] - Specifies the the decimal scale\r\n * @param {string} [oData.calendar] - Specifies the calendar if type is date, datetime or time\r\n * @param {string} [oData.format] - Specifies a custom format if type is date, datetime or time\r\n * @param {string} [oData.unit] - Specifies the UoM if type is number.\r\n * @param {string} [oData.unitProperty] - Name of the property that contains the UoM if type is number or currency.\r\n * @param {boolean} [oData.displayUnit] - Specifies if the UoM will be shown or not if type is number or currency.\r\n * @param {string} [oData.trueValue] - Specifies the displayed value if the boolean type has the value true.\r\n * @param {string} [oData.falseValue] - Specifies the displayed value if the boolean type has the value false.\r\n * @param {string} [oData.template] - Specifies a template string that can be filled with several properties.\r\n *\r\n * @returns {Type} - Returns the specific Type object that contains all the formatting\r\n * @private\r\n */\r\nColumn.prototype._initType = function(oData) {\r\n\tvar type, sType;\r\n\r\n\tsType = oData.type;\r\n\r\n\tif (sType === 'date' || sType === 'datetime' || sType === 'time') {\r\n\t\ttype = new CalendarDate({\r\n\t\t\tcalendar: oData.calendar,\r\n\t\t\tformat: oData.format,\r\n\t\t\ttype: sType\r\n\t\t});\r\n\t} else if (sType === 'number' || sType === 'percent' || sType === 'exponent') {\r\n\t\ttype = new Numeric({\r\n\t\t\tdelimiter: oData.delimiter,\r\n\t\t\tscale: oData.scale,\r\n\t\t\ttype: oData.type,\r\n\t\t\tunit: oData.unit,\r\n\t\t\tunitProperty: oData.unitProperty\r\n\t\t});\r\n\t} else if (sType === 'currency') {\r\n\t\ttype = new Currency({\r\n\t\t\ttype: sType,\r\n\t\t\tunitProperty: oData.unitProperty,\r\n\t\t\tdisplayUnit: oData.displayUnit,\r\n\t\t\tscale: oData.scale\r\n\t\t});\r\n\t} else if (sType === 'boolean') {\r\n\t\ttype = new BooleanType({\r\n\t\t\ttrueValue: oData.trueValue,\r\n\t\t\tfalseValue: oData.falseValue\r\n\t\t});\r\n\t} else {\r\n\t\ttype = new Text({\r\n\t\t\ttype: 'text',\r\n\t\t\ttemplate: oData.template\r\n\t\t});\r\n\t}\r\n\r\n\ttype.registerAt(this.styles);\r\n\r\n\treturn type;\r\n};\r\n\r\n/**\r\n * Returns the Cell object that is referenced by this particular\r\n * Column. Every Column references only one single Cell that gets\r\n * reused for each and every Row.\r\n *\r\n * When binding the actual data to a row, the Cell content, its\r\n * references and its styling get updated and a serialized version\r\n * of the row is stored within the sheet.\r\n *\r\n * @returns {Cell} - The Cell that belongs to this particular Column\r\n */\r\nColumn.prototype.getCell = function() {\r\n\tif (!this.cell) {\r\n\t\tthis.cell = new Cell(this.type);\r\n\t}\r\n\r\n\treturn this.cell;\r\n};\r\n\r\n/**\r\n * This method binds the actual business object property to the columns cell.\r\n *\r\n * @param {object} oData - Business object that gets bound to the Cell of this Column.\r\n */\r\nColumn.prototype.bind = function(oData) {\r\n\r\n\t/*\r\n\t * Due to the fact that Cell#setValue updates the Style depending\r\n\t * on the actual Cell value (i.E. Unit of Measurement for\r\n\t * Currencies), we need to provide the original business object\r\n\t * so that the Cell knows the whole business object instead of\r\n\t * just the value of its particular property.\r\n\t */\r\n\tthis.cell.setValue(this.property, oData);\r\n};\r\n\r\nmodule.exports = Column;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(1);\r\n\r\n/**\r\n * The CalendarDate class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] - A configuration object that is used to specify the formatting\r\n * @param {string} [oConfig.type] - The specific type for this CalendarDate (i.E. date, datetime, time)\r\n * @param {string} [oConfig.format] - A custom format string that will be used as template\r\n * @param {string} [oConfig.calendar] - Specifies the calendar that will be used (default: gregorian)\r\n * @constructor\r\n */\r\nfunction CalendarDate(oConfig) {\r\n\tType.call(this);\r\n\r\n\tthis.type = oConfig ? oConfig.type : null;\r\n\tthis.format = oConfig ? oConfig.format : null;\r\n\tthis.calendar = oConfig ? oConfig.calendar : null;\r\n}\r\n\r\nCalendarDate.prototype = Object.create(Type.prototype);\r\nCalendarDate.prototype.constructor = CalendarDate;\r\n\r\nCalendarDate.DEFAULT = {\r\n\tnumberFormat: 14\r\n};\r\n\r\nCalendarDate.builtin = {\r\n\t14: 'mm-dd-yy',\r\n\t15: 'd-mmm-yy',\r\n\t16: 'd-mmm',\r\n\t17: 'mmm-yy',\r\n\t18: 'h:mm AM/PM',\r\n\t19: 'h:mm:ss AM/PM',\r\n\t20: 'h:mm',\r\n\t21: 'h:mm:ss',\r\n\t22: 'm/d/yy h:mm',\r\n\t45: 'mm:ss',\r\n\t46: '[h]:mm:ss',\r\n\t47: 'mmss.0'\r\n};\r\n\r\n/**\r\n * Creates the Style configuration object for this CalendarDate\r\n * according to its configuration.\r\n *\r\n * @returns {Object} - Style descriptor object\r\n * @private\r\n */\r\nCalendarDate.prototype._createConfiguration = function() {\r\n\tvar key, result, template;\r\n\r\n\tif (!this.type && !this.format && !this.calendar) {\r\n\t\treturn CalendarDate.DEFAULT;\r\n\t}\r\n\r\n\t/* Evaluate type */\r\n\tswitch (this.type) {\r\n\t\tcase 'datetime':\r\n\t\t\ttemplate = CalendarDate.builtin[22];\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\ttemplate = CalendarDate.builtin[21];\r\n\t\t\tbreak;\r\n\t\tdefault: // Assume 'date' as default\r\n\t\t\ttemplate = CalendarDate.builtin[14];\r\n\t}\r\n\r\n\tif (typeof this.format === 'string') {\r\n\t\ttemplate = this.format.match(/^[dhmsy\\s-,.:/]+(AM\\/PM)?$/) ? this.format : template;\r\n\t}\r\n\r\n\t/* Evaluate calendar */\r\n\tswitch (this.calendar) {\r\n\t\tcase 'islamic':\r\n\t\t\ttemplate = 'b2d mmmm yyyy';\r\n\t\t\tbreak;\r\n\t\tcase 'japanese':\r\n\t\t\ttemplate = '[$-ja-JP]ge.m.d';\r\n\t\t\tbreak;\r\n\t\tdefault: // Gregorian calendar is the default case\r\n\t}\r\n\r\n\tresult = {\r\n\t\tnumberFormat: {\r\n\t\t\tformat: template\r\n\t\t}\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in CalendarDate.builtin) {\r\n\t\tif (CalendarDate.builtin[key] === template) {\r\n\t\t\tresult.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nmodule.exports = CalendarDate;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(1);\r\n\r\n/**\r\n * The BooleanType class represents a boolean data type. BooleanType\r\n * data can work in two different ways. The first way is the Office\r\n * Open XML Spreadsheet built-in type that always shows TRUE/FALSE in\r\n * the users locale. This value can easily be used within formulas.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {string} [oConfig.trueValue] - Contains the value that gets displayed if the Boolean is true\r\n * @param {string} [oConfig.falseValue] - Contains the value that gets displayed if the Boolean is false\r\n * @constructor\r\n */\r\nfunction BooleanType(oConfig) {\r\n\tType.call(this);\r\n\r\n\tthis.trueValue = oConfig ? oConfig.trueValue : null;\r\n\tthis.falseValue = oConfig ? oConfig.falseValue : null;\r\n}\r\n\r\nBooleanType.prototype = Object.create(Type.prototype);\r\nBooleanType.prototype.constructor = BooleanType;\r\n\r\nBooleanType.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\n/**\r\n * This method indicates if the properties trueValue and falseValue\r\n * are configured correctly and the BooleanType supports a custom\r\n * format.\r\n *\r\n * @returns {boolean} - Whether to use a custom formatted BooleanType or the built-in type.\r\n */\r\nBooleanType.prototype.isCustomFormatted = function() {\r\n\treturn !!this.trueValue\r\n\t\t&& typeof this.trueValue === 'string'\r\n\t\t&& !!this.falseValue\r\n\t\t&& typeof this.falseValue === 'string';\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @private\r\n */\r\nBooleanType.prototype._createConfiguration = function() {\r\n\tvar result = BooleanType.DEFAULT;\r\n\r\n\tif (this.isCustomFormatted()) {\r\n\t\tresult = {\r\n\t\t\tnumberFormat: {\r\n\t\t\t\tformat: '\"' + this.trueValue + '\";;\"' + this.falseValue + '\"'\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nmodule.exports = BooleanType;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Numeric = __webpack_require__(3);\r\n\r\n/**\r\n * The Currency class represents a currency data type. It handles the\r\n * formatting and accepts several options like second property for\r\n * the unit of measurement or if the unit of measurement should be\r\n * displayed.\r\n *\r\n * It styles currencies with its particular amount of decimals.\r\n *\r\n * @param {Object} oConfig - A configuration object that is used to specify the formatting\r\n * @param {string} oConfig.unitProperty - A custom format string that will be used as template\r\n * @param {boolean} [oConfig.displayUnit] - Indicating whether the unit of measurement will be shown (default: true)\r\n * @param {number} [oConfig.scale] - A fixed scale that will be applied to all cells within this column,\r\n * regardless of its particular unit of measurement\r\n * @constructor\r\n */\r\nfunction Currency(oConfig) {\r\n\tNumeric.call(this, oConfig);\r\n\r\n\tthis.displayUnit = typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\r\n}\r\n\r\nCurrency.prototype = Object.create(Numeric.prototype);\r\nCurrency.prototype.constructor = Currency;\r\n\r\n/**\r\n * Defines the display default scale that is used for alignment. This\r\n * has no effect on the technical scale of currency values. It is\r\n * only used for alignment purposes so that different currencies with\r\n * different scale are still aligned correctly.\r\n *\r\n * @type {number}\r\n */\r\nCurrency.DEFAULT_SCALE = 3;\r\n\r\nCurrency.DIGITS = {\r\n\t'ADP': 0,\r\n\t'AFN': 0,\r\n\t'ALL': 0,\r\n\t'AMD': 0,\r\n\t'BHD': 3,\r\n\t'BIF': 0,\r\n\t'BYR': 0,\r\n\t'CAD': 2,\r\n\t'CHF': 2,\r\n\t'CLF': 4,\r\n\t'CLP': 0,\r\n\t'COP': 0,\r\n\t'CRC': 0,\r\n\t'CZK': 0,\r\n\t'DEFAULT': 2,\r\n\t'DJF': 0,\r\n\t'ESP': 0,\r\n\t'GNF': 0,\r\n\t'GYD': 0,\r\n\t'HUF': 0,\r\n\t'IDR': 0,\r\n\t'IQD': 0,\r\n\t'IRR': 0,\r\n\t'ISK': 0,\r\n\t'ITL': 0,\r\n\t'JOD': 3,\r\n\t'JPY': 0,\r\n\t'KMF': 0,\r\n\t'KPW': 0,\r\n\t'KRW': 0,\r\n\t'KWD': 3,\r\n\t'LAK': 0,\r\n\t'LBP': 0,\r\n\t'LUF': 0,\r\n\t'LYD': 3,\r\n\t'MGA': 0,\r\n\t'MGF': 0,\r\n\t'MMK': 0,\r\n\t'MNT': 0,\r\n\t'MRO': 0,\r\n\t'MUR': 0,\r\n\t'OMR': 3,\r\n\t'PKR': 0,\r\n\t'PYG': 0,\r\n\t'RSD': 0,\r\n\t'RWF': 0,\r\n\t'SLL': 0,\r\n\t'SOS': 0,\r\n\t'STD': 0,\r\n\t'SYP': 0,\r\n\t'TMM': 0,\r\n\t'TND': 3,\r\n\t'TRL': 0,\r\n\t'TWD': 0,\r\n\t'TZS': 0,\r\n\t'UGX': 0,\r\n\t'UYI': 0,\r\n\t'UZS': 0,\r\n\t'VND': 0,\r\n\t'VUV': 0,\r\n\t'XAF': 0,\r\n\t'XOF': 0,\r\n\t'XPF': 0,\r\n\t'YER': 0,\r\n\t'ZMK': 0,\r\n\t'ZWD': 0\r\n};\r\n\r\n/**\r\n * Creates the Style configuration needed for registering the Type\r\n * specific styling in the Styles class.\r\n *\r\n * @param {Object} oData - Business object that gets bound to the styling template\r\n * @returns {Object} - Styling configuration object\r\n * @private\r\n */\r\nCurrency.prototype._createConfiguration = function(oData) {\r\n\tvar i, j, scale, template, unit;\r\n\r\n\ttemplate = '#,##0';\r\n\r\n\t// Apply fixed scale, only if no unitProperty is provided\r\n\tif (!this.unitProperty && typeof this.scale === 'number') {\r\n\t\tscale = this.scale;\r\n\t} else {\r\n\t\tscale = Currency.DIGITS[oData[this.unitProperty]];\r\n\t}\r\n\r\n\t/* If the currency uses the default scale */\r\n\tif (typeof scale !== 'number') {\r\n\t\tscale = Currency.DIGITS.DEFAULT;\r\n\t}\r\n\r\n\t/* Apply separator or placeholder */\r\n\ttemplate += (scale > 0) ? '.' : '_.';\r\n\r\n\tfor (i = 0; i < scale; i++) {\r\n\t\ttemplate += '0';\r\n\t}\r\n\r\n\tfor (j = Currency.DEFAULT_SCALE - scale; j > 0; j--) {\r\n\t\ttemplate += '_0';\r\n\t}\r\n\r\n\t/* Add unit of measurement if required */\r\n\tif (this.displayUnit) {\r\n\t\tunit = oData[this.unitProperty] ? '\"' + oData[this.unitProperty] + '\"' : '_E_U_R';\r\n\r\n\t\t// Applies unit of measurement or a placeholder if unit is empty\r\n\t\ttemplate = template + ' ' + unit;\r\n\t}\r\n\r\n\t// Add formatting for negative values as well\r\n\ttemplate = '* ' + template + ';* - ' + template;\r\n\r\n\treturn { numberFormat: { format: template } };\r\n};\r\n\r\nmodule.exports = Currency;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode\t\t = __webpack_require__(0),\r\n\tSharedString\t= __webpack_require__(15);\r\n\r\n/**\r\n * The SharedStrings class represents the list of shared String\r\n * objects that is used in the Office Open XMl Spreadsheet. The\r\n * SharedStrings object reduces redundancy within the data by\r\n * providing a reference to unique Strings instead of repeating\r\n * them.\r\n *\r\n * Due to the fact that the Strings are shared within the whole\r\n * workbook, each instance of the document export only has one\r\n * single instance of SharedString and therefore it uses the\r\n * Singleton pattern to ensure this.\r\n *\r\n * @class\r\n */\r\nfunction SharedStrings() {\r\n\tif (SharedStrings.instance instanceof SharedStrings) {\r\n\t\treturn SharedStrings.instance;\r\n\t}\r\n\r\n\tXMLNode.call(this, SharedStrings.metadata);\r\n\r\n\tObject.defineProperty(this, 'map', {value: new Map(), writable: false});\r\n\tObject.defineProperty(this, '_shared', {value: new SharedString(''), writable: false});\r\n\r\n\tSharedStrings.instance = this;\r\n}\r\n\r\nSharedStrings.prototype = Object.create(XMLNode.prototype);\r\nSharedStrings.prototype.constructor = SharedStrings;\r\n\r\n/**\r\n * Retrieves the Singleton instance of SharedStrings. If no instance is present, it will create one.\r\n *\r\n * @function\r\n * @returns {object} - Singleton instance\r\n */\r\nSharedStrings.getInstance = function() {\r\n\tif (!SharedStrings.instance) {\r\n\t\tSharedStrings.instance = new SharedStrings();\r\n\t}\r\n\r\n\treturn SharedStrings.instance;\r\n};\r\n\r\nSharedStrings.metadata = {\r\n\ttag: 'sst',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t,{\r\n\t\t\tname: 'count', // Optional as long as uniqueCount is not set\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname : 'uniqueCount', // Optional as long as count is not set\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t\t*/\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds the specified string value to the set of SharedStrings. The\r\n * method creates a SharedString proxy object that contains\r\n * information about the string itself as well as its index. The\r\n * index is zero-based and can be used for referencing within Cell\r\n * objects.\r\n *\r\n * @function insert\r\n * @param {string} sValue - The string that has to be inserted\r\n * @return {object} - The SharedString instance that represents the provided string value\r\n */\r\nSharedStrings.prototype.insert = function(sValue) {\r\n\tvar index;\r\n\r\n\tif (this.map.has(sValue)) {\r\n\t\treturn this.map.get(sValue);\r\n\t}\r\n\r\n\tthis._shared.setValue(sValue);\r\n\tindex = this.map.size;\r\n\tthis.map.set(sValue, index);\r\n\r\n\t/* The SharedString needs to be added to the child nodes as well for serialization purposes */\r\n\tthis.childs.push(this._shared.serialize());\r\n\r\n\treturn index;\r\n};\r\n\r\nmodule.exports = SharedStrings;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(1);\r\n\r\n/**\r\n * The Text class represents textual information without any\r\n * particular formatting. It provides font and sizing details that\r\n * can be used by the Styles class.\r\n *\r\n * @param {Object} [oConfig] - TODO\r\n * @constructor\r\n */\r\nfunction Text(oConfig) {\r\n\tType.call(this);\r\n\r\n\tthis.font = oConfig ? oConfig.font : null;\r\n\tthis.fill = oConfig ? oConfig.fill : null;\r\n\tthis.template = oConfig ? oConfig.template : null;\r\n}\r\n\r\nText.prototype = Object.create(Type.prototype);\r\nText.prototype.constructor = Text;\r\n\r\nText.DEFAULT = {\r\n\tfont: {\r\n\t\tsize: 11,\r\n\t\tname: 'Arial'\r\n\t}\r\n};\r\n\r\nText.prototype._createConfiguration = function() {\r\n\treturn (this.font || this.fill) ? { font: this.font, fill: this.fill } : Text.DEFAULT;\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. If a template is configured, it will automatically fill\r\n * the template with the values from the business object and returns\r\n * the processed string.\r\n *\r\n * @param {string|Array} properties - Name of the property or array of properties that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nText.prototype.getValue = function(properties, oData) {\r\n\tvar match, regex, result, skip, value;\r\n\r\n\tif (!this.template) {\r\n\t\treturn typeof properties === 'string' ? oData[properties] : oData[properties[0]];\r\n\t}\r\n\r\n\t// Obtain if the further processing should be skipped due to missing values for the template\r\n\tskip = properties.every(function(property) {\r\n\t\treturn oData[property] === null\r\n\t\t\t|| typeof oData[property] === 'undefined'\r\n\t\t\t|| (typeof oData[property] === 'string' && oData[property] === '');\r\n\t});\r\n\r\n\tif (skip) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tresult = this.template;\r\n\tregex = /{([0-9]+)}/g;\r\n\r\n\tmatch = regex.exec(result);\r\n\twhile (match !== null) {\r\n\r\n\t\tvalue = oData[properties[match[1]]];\r\n\r\n\t\t// Overwrite empty or undefined values by an empty string\r\n\t\tif (value === null || typeof value === 'undefined') {\r\n\t\t\tvalue = '';\r\n\t\t}\r\n\r\n\t\t// Replaces the matched placeholder by the indexed property value\r\n\t\tresult = result.replace(match[0], value);\r\n\r\n\t\tmatch = regex.exec(result);\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nmodule.exports = Text;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n * Created by Sebastian Bender on 16.03.2017.\r\n */\r\nvar XMLNode = __webpack_require__(0);\r\nvar Cell\t= __webpack_require__(2);\r\n\r\n/**\r\n * The Row is representing a single row according to the Office Open\r\n * XML standard. A Row provides information about its index (line\r\n * number) and can contain several Cell objects.\r\n *\r\n * @class\r\n */\r\nfunction Row() {\r\n\tXMLNode.call(this, Row.metadata);\r\n}\r\n\r\nRow.prototype = Object.create(XMLNode.prototype);\r\nRow.prototype.constructor = Row;\r\n\r\nRow.metadata = {\r\n\ttag: 'row',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'spans',\r\n\t\t\tname: 'spans',\r\n\t\t\tvalue: '1:1'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Calculates the Office Open XML Spreadsheet column reference for a\r\n * numeric value. Referring to the standard, the column is described\r\n * as a alphabetical value consisting of at least one uppercase character.\r\n * This function maps these alphabetical representation to numerical\r\n * zero-based indices.\r\n *\r\n * i.E. the column index 27 (which is the 28th column) results in 'AB'\r\n *\r\n * @param {number} nIndex - Numerical index for the requested column\r\n * @returns {string} - The alphabetical column reference for the given index.\r\n */\r\nRow.getColumnReferenceByIndex = function(nIndex) {\r\n\treturn nIndex < 26 ?\r\n\t\tString.fromCharCode(65 + nIndex) :\r\n\t\tRow.getColumnReferenceByIndex(Math.floor(nIndex / 26) - 1) + String.fromCharCode(65 + (nIndex % 26));\r\n};\r\n\r\n\r\n/**\r\n * Update the 'spans' attribute on this particular {@link Row} for\r\n * optimization purposes. This property optimizes the loading and\r\n * rendering in Microsoft Excel.\r\n *\r\n * @private\r\n */\r\nRow.prototype._updateSpans = function() {\r\n\tthis.spans.value = '1:' + this.childs.length;\r\n};\r\n\r\n/**\r\n * Adds the specified {@link Cell} to the current {@link Row}. If the\r\n * current row already has a reference or style, it will propagate\r\n * this information to the newly added Cell.\r\n *\r\n * @param {object} oCell - Instance of Excel.objects.Cell\r\n */\r\nRow.prototype.addCell = function(oCell) {\r\n\tvar count;\r\n\r\n\tif (!oCell || !(oCell instanceof Cell)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tcount = this.childs.push(oCell);\r\n\tthis._updateSpans();\r\n\r\n\t/* Applies the cell reference if row reference is already present */\r\n\tif (this.reference.value) {\r\n\t\toCell.setReference(Row.getColumnReferenceByIndex(count - 1) + this.reference.value);\r\n\t}\r\n\r\n\tif (this.style) {\r\n\t\toCell.setStyle(this.style.value);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Updates the reference of the current {@link Row}. The Row reference\r\n * represents the line number within the Sheet. It will\r\n * automatically update all assigned Cell references.\r\n *\r\n * @param {string} sReference - Row number within the sheet\r\n */\r\nRow.prototype.setReference = function(sReference) {\r\n\tvar i, reference;\r\n\r\n\treference = typeof sReference == 'number' ? String(sReference) : sReference;\r\n\tif (!reference || !reference.match(/^[1-9]+[0-9]*$/g)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/* Only update if necessary */\r\n\tif (this.reference.value != reference) {\r\n\t\tthis.reference.value = reference;\r\n\t\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\t\tthis.childs[i].setReference(Row.getColumnReferenceByIndex(i) + reference);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given {@link Style} to the current {@link Row}.\r\n *\r\n * @param {(number|string)} nStyle - A number or string representing the Style id\r\n */\r\nRow.prototype.setStyle = function(nStyle) {\r\n\tvar i, style;\r\n\r\n\tif (!this.style) {\r\n\t\tstyle = this.addAttribute({name: 's'});\r\n\t\tObject.defineProperty(this, 'style', {value: style});\r\n\t}\r\n\r\n\tthis.style.value = nStyle;\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tthis.childs[i].setStyle(nStyle);\r\n\t}\r\n};\r\n\r\nmodule.exports = Row;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar App\t\t\t\t\t= __webpack_require__(13),\r\n\tColumn\t\t\t\t= __webpack_require__(5),\r\n\tColumnConfiguration\t= __webpack_require__(16),\r\n\tContentTypes\t\t= __webpack_require__(17),\r\n\tCore\t\t\t\t= __webpack_require__(18),\r\n\tRelationships\t\t= __webpack_require__(19),\r\n\tSharedStrings\t\t= __webpack_require__(9),\r\n\tSheet\t\t\t\t= __webpack_require__(20),\r\n\tStyles\t\t\t\t= __webpack_require__(21),\r\n\tWorkbook\t\t\t= __webpack_require__(28);\r\n\r\n/**\r\n * The XLSXBuilder class represents an Office Open XML Spreadsheet\r\n * (Microsoft Excel) that can be used to insert structured and\r\n * formatted data and pack a zipped *.xlsx document.\r\n *\r\n * XLSXBuilder requires JSZip 2.x or 3.x to be present.\r\n *\r\n * @param {(Object[]|string[])} aBinding - Binding configuration that is used for {@link Column} definition\r\n * @param {Object} [oContext] - Context object containing metadata for this particular XLSX\r\n * @param {string} [oContext.application] - Application that created this XLSX\r\n * @param {string} [oContext.version] - Application version that was used to create this XLSX\r\n * @param {string} [oContext.title] - Title of the XLSX document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @constructor\r\n */\r\nfunction XLSXBuilder(aBinding, oContext) {\r\n\tif (!(aBinding instanceof Array) || !aBinding.length) {\r\n\t\tthrow new Error('No binding provided');\r\n\t}\r\n\r\n\tthis.styles = new this.objects.Styles();\r\n\tthis.sheet = new this.objects.Sheet(new this.binding.ColumnConfiguration(aBinding, this.styles));\r\n\r\n\tthis.app = new this.objects.App(oContext);\r\n\tthis.core = new this.objects.Core(oContext);\r\n}\r\n\r\nXLSXBuilder.prototype = {\r\n\r\n\tbinding: {\r\n\t\tColumnConfiguration: ColumnConfiguration,\r\n\t\tColumn: Column\r\n\t},\r\n\r\n\tobjects: {\r\n\t\tApp: App,\r\n\t\tContentTypes: ContentTypes,\r\n\t\tCore: Core,\r\n\t\tRelationships: Relationships,\r\n\t\tSharedStrings: SharedStrings,\r\n\t\tSheet: Sheet,\r\n\t\tStyles: Styles,\r\n\t\tWorkbook: Workbook\r\n\t},\r\n\r\n\t/**\r\n\t * Triggers the packaging process for the Office Open XML\r\n\t * SpreadSheet. You need to call the method insert() first,\r\n\t * otherwise the generated Document will contain no data.\r\n\t *\r\n\t * The method returns a promise to allow the library to work\r\n\t * asynchronously.\r\n\t *\r\n\t * @function build\r\n\t * @returns {object} - Packed zip file as Blob or Nodebuffer, depending on the runtime environment\r\n\t */\r\n\tbuild: function() {\r\n\t\tvar files, zip, i, j, fileConfig, FileType, xmlObject, relation, zipConfig, promise;\r\n\r\n\t\tfiles = [\r\n\t\t\t{\r\n\t\t\t\tname: '[Content_Types].xml',\r\n\t\t\t\tpath: '',\r\n\t\t\t\ttype: this.objects.ContentTypes\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '.rels',\r\n\t\t\t\tpath: '_rels/',\r\n\t\t\t\ttype: this.objects.Relationships,\r\n\t\t\t\trelationships: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'xl/workbook.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/app.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/core.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'workbook.xml',\r\n\t\t\t\tpath: 'xl/',\r\n\t\t\t\ttype: this.objects.Workbook\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'workbook.xml.rels',\r\n\t\t\t\tpath: 'xl/_rels/',\r\n\t\t\t\ttype: this.objects.Relationships,\r\n\t\t\t\trelationships: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'worksheets/sheet1.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'sharedStrings.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'styles.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t];\r\n\t\tzip = new JSZip();\r\n\r\n\t\tfor (i = 0; i < files.length; i++) {\r\n\t\t\tfileConfig = files[i];\r\n\t\t\tFileType = fileConfig.type;\r\n\t\t\txmlObject = new FileType(fileConfig);\r\n\r\n\t\t\tif (xmlObject instanceof this.objects.Relationships) {\r\n\t\t\t\tfor (j = 0; j < fileConfig.relationships.length; j++) {\r\n\t\t\t\t\trelation = fileConfig.relationships[j];\r\n\t\t\t\t\txmlObject.addRelationship(relation.target, relation.type);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tzip.file(fileConfig.path + fileConfig.name, xmlObject.serialize());\r\n\t\t}\r\n\r\n\t\t// Add document metadata\r\n\t\tzip.file('docProps/app.xml', this.app.serialize());\r\n\t\tzip.file('docProps/core.xml', this.core.serialize());\r\n\r\n\t\t// Add central styles\r\n\t\tzip.file('xl/styles.xml', this.styles.serialize());\r\n\r\n\t\t// Add current sheet\r\n\t\tzip.file('xl/worksheets/sheet1.xml', this.sheet.serialize());\r\n\r\n\t\t// Add Shared Strings Singleton\r\n\t\tzip.file('xl/sharedStrings.xml', this.objects.SharedStrings.getInstance().serialize());\r\n\r\n\t\tzipConfig = {\r\n\t\t\tcompression: 'DEFLATE',\r\n\t\t\ttype: JSZip.support.nodebuffer ? 'nodebuffer' : 'arraybuffer'\r\n\t\t};\r\n\r\n\t\tif (zip.generateAsync) {\r\n\t\t\tpromise = zip.generateAsync(zipConfig);\r\n\t\t} else { // Zip.generate from JSZip 2.x\r\n\t\t\tpromise = new Promise(function(resolve, reject) {\r\n\t\t\t\tvar zipped = zip.generate(zipConfig);\r\n\r\n\t\t\t\tresolve(zipped);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn promise;\r\n\t},\r\n\r\n\t/**\r\n\t * Insert the specified set of data to the Open Document Spreadsheet.\r\n\t * All data will be bound according to the {@link ColumnConfiguration}.\r\n\t *\r\n\t * @function append\r\n\t * @param {(Object[]|Object)} aData - Array of data that gets appended to the Spreadsheet\r\n\t */\r\n\tappend: function(aData) {\r\n\t\tvar array;\r\n\r\n\t\t/* We need to check if param is null or undefined because [null].length results in 1 */\r\n\t\tif (typeof aData === 'undefined' || aData === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tarray = aData instanceof Array ? aData : [aData];\r\n\r\n\t\twhile (array.length) {\r\n\t\t\tthis.sheet.insert(array.shift());\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = XLSXBuilder;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * This class represents the app.xml within the generated Excel. The\r\n * App contains information about the application that created the\r\n * Office Open XML Spreadsheet.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.application] - Application that created this Excel\r\n * @param {string} [oContext.version] - Application version that was used to create this Excel\r\n * @constructor\r\n */\r\nfunction App(oContext) {\r\n\tXMLNode.call(this, App.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.application) {\r\n\t\t\tthis.application.value = oContext.application;\r\n\t\t}\r\n\r\n\t\tif (oContext.version) {\r\n\t\t\tthis.version.value = oContext.version;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nApp.prototype = Object.create(XMLNode.prototype);\r\nApp.prototype.constructor = App;\r\n\r\nApp.metadata = {\r\n\ttag: 'Properties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'vt',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'application',\r\n\t\t\ttag: 'Application',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'DocSecurity',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Company',\r\n\t\t\tvalue: 'SAP SE'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'SharedDoc',\r\n\t\t\tvalue: 'false'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'version',\r\n\t\t\ttag: 'AppVersion',\r\n\t\t\tvalue: '1.52' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = App;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLElement = __webpack_require__(4);\r\n\r\n/**\r\n * The class XMLAttribute is a wrapper for representing XML-like attributes attributes.\r\n * It is mainly used for defining namespaces and namespace-related attributes.\r\n *\r\n * @param {object} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.name - String representation of the XML tag.\r\n * @param {string} [oConfig.prefix] - Prefix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.suffix] - Suffix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.value] - Textual value of the {@link XMLAttribute}.\r\n * @class\r\n * @module xml/XMLAttribute\r\n */\r\nfunction XMLAttribute(oConfig) {\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\tthis.name = oConfig.name ? oConfig.name : '';\r\n\tthis.prefix = oConfig.prefix ? oConfig.prefix : '';\r\n\tthis.suffix = oConfig.suffix ? oConfig.suffix : '';\r\n}\r\n\r\nXMLAttribute.prototype = Object.create(XMLElement.prototype);\r\nXMLAttribute.prototype.constructor = XMLAttribute;\r\n\r\n/**\r\n * Performes a String serialization of the XMLAttribute. The representation is formatted as follows:\r\n * <prefix>:<name>:<suffix>=\"<value>\"\r\n *\r\n * i.E. ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'\r\n * for { name: 'xmlns', suffix: 'xsi', value: 'http://www.w3.org/2001/XMLSchema-instance' }\r\n *\r\n * Note that the serialized String always comes with a leading whitespace to allow easy concatenation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLAttribute\r\n */\r\nXMLAttribute.prototype.serialize = function(){\r\n\treturn ' ' + (this.prefix ? this.prefix + ':' : '') + this.name\r\n\t\t+ (this.suffix ? ':' + this.suffix : '') + '=\"' + this.xmlEncode(this.value) + '\"';\r\n};\r\n\r\nmodule.exports = XMLAttribute;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The SharedString class represents each shared String within the\r\n * SharedStrings file.\r\n *\r\n * @param {string} sValue - The String that gets represented by this SharedString object\r\n * @class\r\n */\r\nfunction SharedString(sValue) {\r\n\tXMLNode.call(this, SharedString.metadata);\r\n\r\n\tthis.setValue(sValue);\r\n}\r\n\r\nSharedString.prototype = Object.create(XMLNode.prototype);\r\nSharedString.prototype.constructor = SharedString;\r\n\r\n\r\nSharedString.metadata = {\r\n\ttag: 'si',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 't'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Assigns the given value to the current SharedString instance.\r\n *\r\n * @function\r\n * @param {string} sValue - The string value that should be added\r\n */\r\nSharedString.prototype.setValue = function(sValue) {\r\n\r\n\tif (sValue && typeof sValue == 'string') {\r\n\t\tthis.text.value = sValue;\r\n\t} else {\r\n\r\n\t\t/**\r\n\t\t * There are other implementations for creating a string\r\n\t\t * representation out of a number that might be more\r\n\t\t * convenient like new String(number).toString() or\r\n\t\t * number.toString() but '' + number is the best performing.\r\n\t\t */\r\n\t\tthis.text.value = '' + sValue;\r\n\t}\r\n};\r\n\r\nmodule.exports = SharedString;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Column\t= __webpack_require__(5),\r\n\tText\t= __webpack_require__(10),\r\n\tRow\t\t= __webpack_require__(11),\r\n\tCell\t= __webpack_require__(2);\r\n\r\n/**\r\n * ColumnConfiguration represents the configuration of all columns within\r\n * one Sheet. The ColumnConfiguration handles the mapping of object\r\n * properties to certain columns,, labeling, type definition and also\r\n * display information like width and alignment.\r\n *\r\n * @param {Array} aColumnConfig -  An array of Column definitions. {@see Column} for further details\r\n * @param {Styles} oStyles - Style collection that is used to register Cell or row specific styles\r\n * @module binding/ColumnBinding\r\n * @constructor\r\n */\r\nfunction ColumnConfiguration(aColumnConfig, oStyles) {\r\n\tvar column, i;\r\n\r\n\tthis.columns = [];\r\n\tthis.row = null;\r\n\tthis.styles = oStyles;\r\n\r\n\tfor (i = 0; i < aColumnConfig.length; i++) {\r\n\t\tcolumn = aColumnConfig[i] instanceof Column ? aColumnConfig[i] : new Column(aColumnConfig[i], this.styles);\r\n\t\tthis.columns.push(column);\r\n\t}\r\n}\r\n\r\n/**\r\n * Initializes the objects that are necessary for the binding. This\r\n * components are:\r\n * - a template Row\r\n * - a Cell for each Column\r\n * - a Style for each data type referenced by each Column\r\n *\r\n * @private\r\n */\r\nColumnConfiguration.prototype._initBinding = function() {\r\n\tvar i;\r\n\r\n\tthis.row = new Row();\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis.row.addCell(this.columns[i].getCell());\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Creates an new Row and binds the provided data to the Row Cells according to the current ColumnConfiguration.\r\n *\r\n * @param {Object} oData - The data object that has to be bound to the row\r\n * @returns {Row} - Returns the created Row that contains the provided data\r\n */\r\nColumnConfiguration.prototype.bind = function(oData) {\r\n\tvar i;\r\n\r\n\tif (this.row === null) {\r\n\t\tthis._initBinding();\r\n\t}\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis.columns[i].bind(oData);\r\n\t}\r\n\r\n\treturn this.row;\r\n};\r\n\r\n\r\n/**\r\n * Creates the header Row according to the current ColumnConfiguration and returns it.\r\n *\r\n * @returns {Row} - Header row according to the ColumnConfiguration\r\n */\r\nColumnConfiguration.prototype.getHeader = function() {\r\n\tvar cell, row, type;\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F7F7F7'\r\n\t\t}\r\n\t});\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId());\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\tthis.columns.forEach(function(column, index, array) {\r\n\r\n\t\t/* Create new Cell and assign value */\r\n\t\tcell = new Cell(type);\r\n\t\tcell.setValue('label', column);\r\n\r\n\t\trow.addCell(cell);\r\n\t});\r\n\r\n\treturn row;\r\n};\r\n\r\n\r\n/**\r\n * Returns the size of the ColumnConfiguration - respectively the\r\n * count of the configured columns.\r\n *\r\n * @returns {number} Count of configured columns\r\n */\r\nColumnConfiguration.prototype.size = function() {\r\n\treturn this.columns.length;\r\n};\r\n\r\nmodule.exports = ColumnConfiguration;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * This class represents the [Content_Types].xml within the generated Excel.\r\n *\r\n * @constructor\r\n */\r\nfunction ContentTypes() {\r\n\tXMLNode.call(this, ContentTypes.metadata);\r\n}\r\n\r\nContentTypes.prototype = Object.create(XMLNode.prototype);\r\nContentTypes.prototype.constructor = ContentTypes;\r\n\r\n\r\nContentTypes.metadata = {\r\n\ttag: 'Types',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/content-types'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'rels'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.relationships+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/workbook.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/worksheets/sheet1.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/styles.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/sharedStrings.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/core.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.core-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/app.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = ContentTypes;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * This class represents the core.xml within the generated Excel. The\r\n * Core contains basic information about the content and the owner of\r\n * the file.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.title] - Title of the Excel document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @constructor\r\n */\r\nfunction Core(oContext) {\r\n\tXMLNode.call(this, Core.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.title) {\r\n\t\t\tthis.title.value = oContext.title;\r\n\t\t}\r\n\r\n\t\tif (oContext.modifiedBy) {\r\n\t\t\tthis.modifiedBy.value = oContext.modifiedBy;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nCore.prototype = Object.create(XMLNode.prototype);\r\nCore.prototype.constructor = Core;\r\n\r\nCore.metadata = {\r\n\ttag: 'cp:coreProperties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'cp',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dc',\r\n\t\t\tvalue: 'http://purl.org/dc/elements/1.1/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcterms',\r\n\t\t\tvalue: 'http://purl.org/dc/terms/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcmitype',\r\n\t\t\tvalue: 'http://purl.org/dc/dcmitype/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'xsi',\r\n\t\t\tvalue: 'http://www.w3.org/2001/XMLSchema-instance'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'title',\r\n\t\t\ttag: 'dc:title',\r\n\t\t\tvalue: 'Table Export' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dc:creator',\r\n\t\t\tvalue: 'SAP UI5 Document Export'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dcterms:created',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprefix: 'xsi',\r\n\t\t\t\t\tname: 'type',\r\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: new Date().toISOString()\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cp:keywords',\r\n\t\t\tvalue: 'SAP UI5 EXPORT'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'modifiedBy',\r\n\t\t\ttag: 'cp:lastModifiedBy',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = Core;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n *\r\n * @constructor\r\n */\r\nfunction Relationships() {\r\n\tXMLNode.call(this, Relationships.metadata);\r\n}\r\n\r\nRelationships.prototype = Object.create(XMLNode.prototype);\r\nRelationships.prototype.constructor = Relationships;\r\n\r\nRelationships.metadata = {\r\n\ttag: 'Relationships',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: []\r\n};\r\n\r\n/**\r\n * Creates a new Relationship entry for the current collection.\r\n * The Relationship references are defined by the ISO/IEC 29500-1:2016 standard.\r\n *\r\n * @param {string} sTarget - Target file within the generated Excel\r\n * @param {string} sType - XMLNS reference of the targets file type\r\n */\r\nRelationships.prototype.addRelationship = function(sTarget, sType) {\r\n\tvar id = 'rId' + (this.childs.length + 1);\r\n\r\n\tthis.childs.push(new XMLNode({\r\n\t\ttag: 'Relationship',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Id',\r\n\t\t\t\tvalue: id\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Type',\r\n\t\t\t\tvalue: sType\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Target',\r\n\t\t\t\tvalue: sTarget\r\n\t\t\t}\r\n\t\t]\r\n\t}));\r\n};\r\n\r\nmodule.exports = Relationships;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode\t\t = __webpack_require__(0),\r\n\tRow\t\t\t = __webpack_require__(11);\r\n\r\n/**\r\n * This class represents a Sheet within an Office Open XML Spreadsheet.\r\n * @param {Object} oColumnConfiguration - ColumnConfiguration object that provides information about the columns\r\n * @constructor\r\n */\r\nfunction Sheet(oColumnConfiguration) {\r\n\tXMLNode.call(this, Sheet.metadata);\r\n\r\n\tObject.defineProperty(this, '_columns', {value: oColumnConfiguration, writable: false});\r\n\r\n\tthis._createCols();\r\n\tthis._createHeader();\r\n}\r\n\r\nSheet.prototype = Object.create(XMLNode.prototype);\r\nSheet.prototype.constructor = Sheet;\r\n\r\nSheet.metadata = {\r\n\ttag: 'worksheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'dimension',\r\n\t\t\ttag: 'dimension',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'sheetViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'sheetView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'workbookViewId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'tabSelected',\r\n\t\t\t\t\t\t\tvalue: '1' // Refers to W3C XML Schema boolean (true)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tproperties: [\r\n\r\n\t\t\t\t\t\t/* Freezes the header row */\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttag: 'pane',\r\n\t\t\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'ySplit',\r\n\t\t\t\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'topLeftCell',\r\n\t\t\t\t\t\t\t\t\tvalue: 'A2'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'activePane',\r\n\t\t\t\t\t\t\t\t\tvalue: 'bottomLeft'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'state',\r\n\t\t\t\t\t\t\t\t\tvalue: 'frozen'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'sheetFormatPr',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultRowHeight',\r\n\t\t\t\t\tvalue: '15'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'columns',\r\n\t\t\ttag: 'cols'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'data',\r\n\t\t\ttag: 'sheetData'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'filter',\r\n\t\t\ttag: 'autoFilter',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'pageMargins',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'left',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'right',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'top',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bottom',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'header',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'footer',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nSheet.MAX_ROWS = 1048576;\r\n\r\n/**\r\n * Creates the column specific information within the worksheet.\r\n * Column specific information is i.E. the width or the use of the\r\n * bestFit functionality.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createCols = function() {\r\n\tvar col, i, minWidth, width,\r\n\t\tautoFitButtonOffset = 2.4;\r\n\r\n\tfor (i = 0; i < this._columns.size(); i++) {\r\n\t\tcol = this._columns.columns[i];\r\n\t\tminWidth = this._calculateColumnWidth(col.label.length) + autoFitButtonOffset;\r\n\t\twidth = Math.max(this._calculateColumnWidth(col.width), minWidth);\r\n\r\n\t\tthis.columns.addChild({\r\n\t\t\ttag: 'col',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'min',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'max',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bestFit',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'width',\r\n\t\t\t\t\tvalue: Math.max(width, minWidth)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'customWidth',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * This method calculates the optimal column width for the given\r\n * amount of characters. It removes the dependency on font size or\r\n * pixel width.\r\n *\r\n * @param {number} nCharacters - Amount of characters that should fit into the column\r\n * @return {number} Excel internal width value corresponding to the used font size\r\n * @private\r\n */\r\nSheet.prototype._calculateColumnWidth = function(nCharacters) {\r\n\tvar defaultFontSize = 11, // Needs to be adjusted once we support different font sizes\r\n\t\tdefaultPaddingAndBorder = 5,\r\n\t\tscaleFactor = 7.33;\r\n\r\n\tif (typeof nCharacters !== 'number') {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\treturn (((nCharacters * 2 / 3) * defaultFontSize) + defaultPaddingAndBorder) / scaleFactor;\r\n};\r\n\r\n/**\r\n * Requests the header Row from the ColumnConfiguration and adds it to the\r\n * sheet.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createHeader = function() {\r\n\r\n\tthis._appendRow(this._columns.getHeader());\r\n};\r\n\r\n/**\r\n * Adds the specified Row to the sheetData element of this Sheet and\r\n * automatically propagates its row index to the row and its cells.\r\n *\r\n * @param {Object} oRow - The Row object that should be appended to the current Sheet\r\n * @private\r\n */\r\nSheet.prototype._appendRow = function(oRow) {\r\n\tvar i, dimension;\r\n\r\n\toRow.setReference('' + (this.data.childs.length + 1));\r\n\r\n\tthis.data.childs.push(oRow.serialize());\r\n\r\n\t/* Update sheet dimension */\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tif (this.childs[i].tag == 'dimension') {\r\n\t\t\tdimension = 'A1:' + Row.getColumnReferenceByIndex(this._columns.size() - 1) + this.data.childs.length;\r\n\r\n\t\t\tthis.dimension.reference.value = dimension;\r\n\t\t\tthis.filter.reference.value = dimension;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Requests a row from the ColumnConfiguration containing the given data\r\n * and adds it to the sheetData element of this Sheet.\r\n *\r\n * The maximum row limit is 1,048,576 but we do not enforce this\r\n * limit because the user rather runs out of memory than reaching\r\n * this limit.\r\n *\r\n * @function insert\r\n * @param {Object} oData - Data object to be inserted\r\n */\r\nSheet.prototype.insert = function(oData) {\r\n\tif (this.data.childs.length == Sheet.MAX_ROWS) {\r\n\t\tthrow new Error('Row limit reached.');\r\n\t}\r\n\r\n\t/* Create row and apply binding */\r\n\tthis._appendRow(this._columns.bind(oData));\r\n};\r\n\r\nmodule.exports = Sheet;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode\t\t\t= __webpack_require__(0),\r\n\tStyle\t\t\t= __webpack_require__(22),\r\n\tFont\t\t\t= __webpack_require__(24),\r\n\tFill\t\t\t= __webpack_require__(25),\r\n\tBorder\t\t\t= __webpack_require__(26),\r\n\tNumberFormat\t= __webpack_require__(27);\r\n\r\n/**\r\n *\r\n * @class\r\n * @module style/Styles\r\n */\r\nfunction Styles() {\r\n\tXMLNode.call(this, Styles.metadata);\r\n\r\n\t/* Microsoft Excel fix - specific fill that needs to be present */\r\n\tthis.addFill({ type: 'none' }); // Add a default fill at index 0\r\n\tthis.addFill({ type: 'gray125' }); // Needs to have index 1\r\n\tthis.addStyle(Style.DEFAULT); // Apply base style to feed the hard-coded cellStyles and cellStyleXfs\r\n}\r\n\r\nStyles.prototype = Object.create(XMLNode.prototype);\r\nStyles.prototype.constructor = Styles;\r\n\r\nStyles.metadata = {\r\n\ttag: 'styleSheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'numberFormats',\r\n\t\t\ttag: 'numFmts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fonts',\r\n\t\t\ttag: 'fonts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fills',\r\n\t\t\ttag: 'fills',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'borders',\r\n\t\t\ttag: 'borders',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyleXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'xf',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'numFmtId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fontId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fillId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'borderId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'cellXfs',\r\n\t\t\ttag: 'cellXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'cellStyle',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\t\tvalue: 'Normal'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xfId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'builtinId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dxfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'tableStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultTableStyle',\r\n\t\t\t\t\tvalue: 'TableStyleMedium2'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultPivotStyle',\r\n\t\t\t\t\tvalue: 'PivotStyleLight16'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n\r\n/**\r\n * Adds the specified Style to the Styles class according to the\r\n * Style configuration. The method will return a Style object that\r\n * references Font, Fill, Border and an optional NumberFormat. If\r\n * some of the referenced Font, Fill, Border or NumberFormat objects\r\n * are not present yet, it will create them automatically, otherwise\r\n * it will re-use existing ones.\r\n *\r\n * The method ensures that particular Style combinations exist only\r\n * once and there are no duplicates.\r\n *\r\n * @param {Object} oData - Configuration object that defines the Style information\r\n * @param {Object} [oData.font] - Configuration object that defines the Font information\r\n * @param {string} [oData.font.name] - Name of the used Font i.E. 'Arial'\r\n * @param {string} [oData.font.size] - Preferred Font size i.E. '12'\r\n * @param {boolean} [oData.font.bold] - Defines the Font weight\r\n * @param {Object} [oData.fill] - Configuration object that defines the Fill information\r\n * @param {string} [oData.fill.color] - HEX string defining the color of the cell fill\r\n * @param {string} [oData.fill.type] - Defines the type of the fill i.E. 'none' or 'solid'\r\n * @param {Object} [oData.border] - Configuration object that defines the Border information\r\n * @param {Object|number} [oData.numberFormat] - Configuration object that defines the NumberFormat information\r\n * @param {string} [oData.numberFormat.format] - Formatting template that will be used\r\n * @param {string} [oData.align] - Defines the text alignment within the cell\r\n * @returns {number} - The ID of the unique Style object that needs to be referenced\r\n */\r\nStyles.prototype.addStyle = function(oData) {\r\n\tvar style, fontId, fillId, borderId, numberFormatId;\r\n\r\n\t/* Add Font, Fill, Border and NumberFormat if needed */\r\n\tfontId = this.addFont(oData.font);\r\n\tfillId = this.addFill(oData.fill);\r\n\tborderId = this.addBorder(oData.border);\r\n\r\n\t/* Fallback to avoid custom NumberFormats that won't be used if oData.numberFormat is undefined */\r\n\tif (typeof oData.numberFormat === 'undefined') {\r\n\t\toData.numberFormat = 0;\r\n\t}\r\n\r\n\tnumberFormatId =\r\n\t\tNumberFormat._isBuiltin(oData.numberFormat) ? oData.numberFormat : this.addNumberFormat(oData.numberFormat);\r\n\r\n\t/* Create temporary Style */\r\n\tstyle = new Style();\r\n\r\n\tstyle.setFontId(fontId);\r\n\tstyle.setFillId(fillId);\r\n\tstyle.getBorderId(borderId);\r\n\tstyle.setNumberFormatId(numberFormatId);\r\n\r\n\t/* Add Style if not already present */\r\n\treturn this._addToAggregation(style, this.cellXfs);\r\n};\r\n\r\n\r\n/**\r\n * Adds the specific item to the provided aggregation. This Method\r\n * should only be called by the library itself due to possible\r\n * failures. It automatically updates the count within the XML\r\n * representation of this aggregation.\r\n *\r\n * This method should only be used for Font, Fill, Border or\r\n * NumberFormat objects.\r\n *\r\n * @param {Font|Fill|Border|NumberFormat|Style} oNewItem - The item that needs to be appended to the aggregation\r\n * @param {Array} aAggregation - An array that represents the aggregation\r\n * @returns {number} - The zero-based index of the element after it was inserted\r\n * @private\r\n */\r\nStyles.prototype._addToAggregation = function(oNewItem, aAggregation) {\r\n\tvar count, i;\r\n\r\n\ti = -1;\r\n\r\n\taAggregation.childs.forEach(function(existingItem, index, array) {\r\n\t\tif (existingItem.equals(oNewItem)) {\r\n\t\t\ti = index;\r\n\t\t}\r\n\t});\r\n\r\n\tif (i === -1) {\r\n\t\taAggregation.addChild(oNewItem);\r\n\t\tcount = aAggregation.childs.length;\r\n\r\n\t\taAggregation.count.value = count;\r\n\t\ti = count - 1;\r\n\t}\r\n\r\n\treturn i;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a RGB color to the Styles collection that is\r\n * referenced by several Styles.\r\n *\r\n * If this particular color is already present, it will not add it a\r\n * second time.\r\n *\r\n * @param {string} sHexColor - HEX string representing a RGB color\r\n */\r\nStyles.prototype.addColor = function(sHexColor) {\r\n\tif (!this.colors) {\r\n\t\tthis.addChild({\r\n\t\t\tid: 'colors',\r\n\t\t\ttag: 'colors',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'mru',\r\n\t\t\t\t\ttag: 'mruColors'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\t// TODO Check if color is already present\r\n\r\n\tthis.colors.mru.addChild({\r\n\t\ttag: 'color',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'rgb',\r\n\t\t\t\tvalue: 'FF' + sHexColor\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Font to the Styles collection that can be\r\n * referenced by several Styles. The Font is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Font is already present, it will not add it a\r\n * second time. This ensures that each referenced Font is unique\r\n * according to the criteria of Font#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Font.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @returns {number} - The index of this Font used for reference by Style objects\r\n */\r\nStyles.prototype.addFont = function(oData) {\r\n\tvar oFont = new Font(oData);\r\n\r\n\treturn this._addToAggregation(oFont, this.fonts);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Fill to the Styles collection that can be\r\n * referenced by several Styles. The Fill is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Fill is already present, it will not add it a\r\n * second time. This ensures that each referenced Fill is unique\r\n * according to the criteria of Fill#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Fill.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @returns {number} - The index of this Fill used for reference by Style objects\r\n */\r\nStyles.prototype.addFill = function(oData) {\r\n\tvar index, oFill;\r\n\r\n\toFill = new Fill(oData);\r\n\r\n\tindex = this._addToAggregation(oFill, this.fills);\r\n\r\n\tif (oFill.getFill() !== null) {\r\n\t\tthis.addColor(oFill.getFill());\r\n\t}\r\n\r\n\treturn index;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Border to the Styles collection that can be\r\n * referenced by several Styles. The Border is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Border is already present, it will not add it a\r\n * second time. This ensures that each referenced Border is unique\r\n * according to the criteria of Border#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Border.\r\n *\r\n * @param {Object} oData - Configuration object for this Border\r\n * @returns {number} - The index of this Border used for reference by Style objects\r\n */\r\nStyles.prototype.addBorder = function(oData) {\r\n\tvar oBorder = new Border(oData);\r\n\r\n\treturn this._addToAggregation(oBorder, this.borders);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a NumberFormat to the Styles collection that can\r\n * be referenced by several Styles. The NumberFormat is instantiated\r\n * according to the provided configuration object.\r\n *\r\n * If this particular NumberFormat is already present, it will not\r\n * add it a second time. This ensures that each referenced\r\n * NumberFormat is unique according to the criteria of\r\n * NumberFormat#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * NumberFormat.\r\n *\r\n * @param {Object} oData - Configuration object for this NumberFormat\r\n * @returns {number} - The index of this NumberFormat used for reference by Style objects\r\n */\r\nStyles.prototype.addNumberFormat = function(oData) {\r\n\tvar index, numberFormat;\r\n\r\n\tnumberFormat = new NumberFormat(oData);\r\n\tindex = this._addToAggregation(numberFormat, this.numberFormats);\r\n\r\n\tnumberFormat.setId(NumberFormat.ID_OFFSET + index);\r\n\r\n\treturn numberFormat.getId();\r\n};\r\n\r\nmodule.exports = Styles;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\nvar Alignment = __webpack_require__(23);\r\n\r\n/**\r\n * Represents a particular Style within the Office Open XML Spreadsheet.\r\n * Instances of this type will be created by the Styles Class after\r\n * registering a new Style.\r\n *\r\n * @constructor\r\n */\r\nfunction Style() {\r\n\tXMLNode.call(this, Style.metadata);\r\n}\r\n\r\nStyle.prototype = Object.create(XMLNode.prototype);\r\nStyle.prototype.constructor = Style;\r\n\r\nStyle.metadata = {\r\n\ttag: 'xf',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'numberFormat',\r\n\t\t\tname: 'numFmtId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'font',\r\n\t\t\tname: 'fontId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\tname: 'fillId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'border',\r\n\t\t\tname: 'borderId',\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nStyle.DEFAULT = {\r\n\tfont: {\r\n\t\tname: 'Arial',\r\n\t\tsize: 11,\r\n\t\tfamily: '2',\r\n\t\tcolor: '1',\r\n\t\tbold: false\r\n\t},\r\n\tfill: {\r\n\t\ttype: 'none'\r\n\t}\r\n};\r\n\r\nStyle.prototype.getAlignment = function() {\r\n\tvar alignProperty = 'alignment';\r\n\r\n\treturn alignProperty in this ? this[alignProperty][alignProperty].value : null;\r\n};\r\n\r\nStyle.prototype.getFontId = function() {\r\n\treturn this.font.value;\r\n};\r\n\r\nStyle.prototype.getFillId = function() {\r\n\treturn this.fill.value;\r\n};\r\n\r\nStyle.prototype.getBorderId = function() {\r\n\treturn this.border.value;\r\n};\r\n\r\nStyle.prototype.getNumberFormatId = function() {\r\n\treturn this.numberFormat.value;\r\n};\r\n\r\n/**\r\n * Applies the alignment to the Style. The alignment must match the\r\n * predefined options of <code>Alignment</code> as far as it is not\r\n * null. Other values will be ignored.\r\n *\r\n * The value <code>null</code> will delete the current alignment.\r\n *\r\n * @param {string|null} sAlign - Alignment that gets applied or null\r\n */\r\nStyle.prototype.setAlignment = function(sAlign) {\r\n\tvar alignProperty = 'alignment';\r\n\r\n\tthis._apply(sAlign, 'Alignment');\r\n\r\n\tif (sAlign === null) {\r\n\t\tthis.remove(alignProperty);\r\n\t}\r\n\r\n\tif (!Alignment.horizontal.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!(alignProperty in this)) {\r\n\t\tthis.addChild({\r\n\t\t\tid: alignProperty,\r\n\t\t\ttag: 'alignment', // This tag is fix, so we can't use the alignProperty variable in this case\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: alignProperty,\r\n\t\t\t\t\tname: 'horizontal'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\t/* The property variable is used on the child node as well */\r\n\tthis[alignProperty][alignProperty].value = sAlign;\r\n};\r\n\r\nStyle.prototype.setFontId = function(nFontId) {\r\n\tthis._apply(nFontId, 'Font');\r\n\r\n\tthis.font.value = nFontId;\r\n};\r\n\r\nStyle.prototype.setFillId = function(nFillId) {\r\n\tthis._apply(nFillId, 'Fill');\r\n\r\n\tthis.fill.value = nFillId;\r\n};\r\n\r\nStyle.prototype.setBorderId = function(sBorderId) {\r\n\tthis.border.value = sBorderId;\r\n};\r\n\r\nStyle.prototype.setNumberFormatId = function(nNumFmtId) {\r\n\tthis._apply(nNumFmtId, 'NumberFormat');\r\n\r\n\tthis.numberFormat.value = nNumFmtId;\r\n};\r\n\r\nStyle.prototype._apply = function(nId, sType) {\r\n\tvar applyProperty = 'apply' + sType;\r\n\r\n\tthis.remove(applyProperty);\r\n\r\n\tif (nId) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: applyProperty,\r\n\t\t\tname: applyProperty,\r\n\t\t\tvalue: '1'\r\n\t\t});\r\n\t}\r\n};\r\n\r\n\r\nStyle.prototype.equals = function(oStyle) {\r\n\tif (!(oStyle instanceof Style)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFontId() === oStyle.getFontId()\r\n\t\t&& this.getFillId() === oStyle.getFillId()\r\n\t\t&& this.getBorderId() === oStyle.getBorderId()\r\n\t\t&& this.getNumberFormatId() === oStyle.getNumberFormatId();\r\n};\r\n\r\nmodule.exports = Style;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\nvar Alignment = {\r\n\thorizontal: {\r\n\t\tLeft: 'left',\r\n\t\tCenter: 'center',\r\n\t\tRight: 'right',\r\n\t\tcontains: function(sAlign) {\r\n\r\n\t\t\treturn _contains(sAlign, Alignment.horizontal);\r\n\t\t}\r\n\t},\r\n\tvertical: {\r\n\t\tTop: 'top',\r\n\t\tMiddle: 'middle',\r\n\t\tBottom: 'bottom',\r\n\t\tcontains: function(sAlign) {\r\n\r\n\t\t\treturn _contains(sAlign, Alignment.vertical);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Checks whether the requested alignment is contained or not. An\r\n * alignment that is contained can be assigned within styles. Other\r\n * alignments that are not contained are not supported and thus not\r\n * assignable. It differentiates between horizontal and vertical\r\n * alignments, depending on the aggregation that was provided.\r\n *\r\n * @param {string} sAlign - The alignment that should be checked\r\n * @param {Array} oAggregation - The aggregation the alignment might be in\r\n * @returns {boolean} - Returns true if the alignment is supported\r\n * @private\r\n */\r\nfunction _contains(sAlign, oAggregation) {\r\n\tvar key, contained = false;\r\n\r\n\tfor (key in oAggregation) {\r\n\t\tcontained = contained ? contained : oAggregation[key] === sAlign && typeof oAggregation[key] !== 'function';\r\n\t}\r\n\r\n\treturn contained;\r\n}\r\n\r\nmodule.exports = Alignment;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The Font class represents a Font configuration within an Office\r\n * Open XML Spreadsheet.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @param {boolean} [oData.bold] - Boolean value indicating if the Font should be bold\r\n * @param {string} [oData.name] - The name of the font that gets used by this Font object i.E. Arial, Verdana, etc.\r\n * @param {number|String} [oData.size] - The font size that is been used\r\n * @param {number} [oData.family] - The font family reference {@see getFamily}\r\n * @constructor\r\n */\r\nfunction Font(oData) {\r\n\tXMLNode.call(this, Font.metadata);\r\n\r\n\tif (oData && oData instanceof Object) {\r\n\t\tthis.setName(oData.name)\r\n\t\t\t.setSize(oData.size)\r\n\t\t\t.setFamily(oData.family)\r\n\t\t\t.setBold(!!oData.bold);\r\n\t}\r\n}\r\n\r\nFont.prototype = Object.create(XMLNode.prototype);\r\nFont.prototype.constructor = Font;\r\n\r\nFont.DEFAULT_SIZE = 11;\r\nFont.DEFAULT_NAME = 'Arial';\r\n\r\nFont.metadata = {\r\n\ttag: 'font',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'size',\r\n\t\t\ttag: 'sz',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_SIZE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'color',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'theme',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'name',\r\n\t\t\ttag: 'name',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_NAME\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'family',\r\n\t\t\ttag: 'family',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: 2\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Font is equal to the given parameter.\r\n *\r\n * @param {Font} oFont - The Font to compare with\r\n * @return {boolean} - Returns true if both Font objects contain the same configuration.\r\n */\r\nFont.prototype.equals = function(oFont) {\r\n\tif (!(oFont instanceof Font)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getName() == oFont.getName()\r\n\t\t&& this.getSize() == oFont.getSize()\r\n\t\t&& this.isBold() == oFont.isBold()\r\n\t\t&& this.getColor() == oFont.getColor()\r\n\t\t&& this.getFamily() == oFont.getFamily();\r\n};\r\n\r\n/**\r\n * Returns whether the Font will be displayed bold or not.\r\n *\r\n * @returns {boolean} - Returns true if the Font is bold\r\n */\r\nFont.prototype.isBold = function() {\r\n\treturn !!this.bold;\r\n};\r\n\r\n/**\r\n * Returns the size of this Font.\r\n *\r\n * @returns {number} - The size of the Font\r\n */\r\nFont.prototype.getSize = function() {\r\n\treturn this.size.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the name of this Font. I.E. Arial, Calibri, etc.\r\n *\r\n * @returns {string} - The name of the Font\r\n */\r\nFont.prototype.getName = function() {\r\n\treturn this.name.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the color reference of this Font.\r\n *\r\n * @returns {string} - The color as HEX string\r\n */\r\nFont.prototype.getColor = function() {\r\n\treturn this.color.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the Font family reference of this Font. The reference is\r\n * defined within the Office Open XML specification.\r\n * 1 : Roman (Times New Roman, SAP-icons)\r\n * 2 : Swiss (Arial, Calibri, Segoe UI, Tahoma, Verdana)\r\n * 3 : Modern\r\n * 4 : Script\r\n * 5 : Decorative\r\n * 6-14 : Reserved for future use\r\n *\r\n * @returns {number} - The Font family ID\r\n */\r\nFont.prototype.getFamily = function() {\r\n\treturn this.family.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * This method can be used to set the Font to bold or not.\r\n *\r\n * @param {boolean} bBold - A boolean value that indicates if the Font should be bold or not\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setBold = function(bBold) {\r\n\tvar boldProperty = 'bold';\r\n\r\n\t/* Early return if bold status is already correct */\r\n\tif (bBold === !!this[boldProperty]) {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tif (bBold) {\r\n\t\tthis.addChild({\r\n\t\t\tid: boldProperty,\r\n\t\t\ttag: 'b'\r\n\t\t});\r\n\t} else {\r\n\t\tthis.remove(boldProperty);\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * This method is used to set the Font family reference for the used font.\r\n *\r\n * @see {@link getFamily}\r\n * @param {number} nFamily - Number that references the Font family\r\n * @returns {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setFamily = function(nFamily) {\r\n\r\n\tif (nFamily > 0 && nFamily < 15) {\r\n\t\tthis.family.valueAttribute.value = nFamily;\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font name to this object.\r\n *\r\n * @param {string} sName - Name of the font i.E. Arial, Calibri, etc.\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setName = function(sName) {\r\n\tif (sName && typeof sName === 'string') {\r\n\t\tthis.name.valueAttribute.value = sName;\r\n\t}\r\n\r\n\t/*\r\n\t * If the font name is Calibri we need to add another child node:\r\n\t *\r\n\t *\t{\r\n\t *\t\ttag: 'scheme',\r\n\t *\t\tattributes: [\r\n\t *\t\t\t{\r\n\t *\t\t\t\tname: 'val',\r\n\t *\t\t\t\tvalue: 'minor'\r\n\t *\t\t\t}\r\n\t *\t\t]\r\n\t *\t}\r\n\t */\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font size to this object.\r\n *\r\n * @param {number} nSize - Textual representation of the font size\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setSize = function(nSize) {\r\n\r\n\t/* Check preconditions */\r\n\tif (typeof nSize !== 'number' || isNaN(nSize) || nSize < 1 || nSize > 96) {\r\n\t\tthrow new Error('The size ' + nSize + ' is not supported.');\r\n\t}\r\n\r\n\tthis.size.valueAttribute.value = nSize;\r\n\r\n\treturn this;\r\n};\r\n\r\nmodule.exports = Font;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * This Class represents a background fill of cells within the Office\r\n * Open Spreadsheet document. The Fill accepts a configuration object\r\n * which might have either an \"color\" or an \"type\" property.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @param {string} [oData.color] - HEX string defining the colored fill\r\n * @param {string} [oData.type] - Color independent fill type\r\n * @constructor\r\n */\r\nfunction Fill(oData) {\r\n\tXMLNode.call(this, Fill.metadata);\r\n\r\n\tif (oData) {\r\n\t\tif (oData.color) {\r\n\t\t\tthis.setFill(oData.color);\r\n\t\t} else if (oData.type) {\r\n\t\t\tthis.setType(oData.type);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nFill.prototype = Object.create(XMLNode.prototype);\r\nFill.prototype.constructor = Fill;\r\n\r\nFill.DEFAULT_TYPE = 'none';\r\n\r\nFill.metadata = {\r\n\ttag: 'fill',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\ttag: 'patternFill',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'type',\r\n\t\t\t\t\tname: 'patternType',\r\n\t\t\t\t\tvalue: Fill.DEFAULT_TYPE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Fill is equal to the one that was provided.\r\n *\r\n * @param {Fill} oFill - The Fill that gets compared to the current Fill\r\n * @returns {boolean} - Returns true if the compared objects are of the same type and contain the same color fill\r\n */\r\nFill.prototype.equals = function(oFill) {\r\n\tif (!(oFill instanceof Fill)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getType() === oFill.getType()\r\n\t\t&& this.getFill() === oFill.getFill();\r\n};\r\n\r\n/**\r\n * Returns the color of the current Fill.\r\n *\r\n * @returns {string|null} - String containing the color HEX color of the Fill or null of no color is assigned\r\n */\r\nFill.prototype.getFill = function() {\r\n\r\n\t/* The opacity needs to be removed before returning the HEX color */\r\n\treturn this.fill.childs.length ? this.fill.color.rgb.value.substring(2) : null;\r\n};\r\n\r\nFill.prototype.setFill = function(sColor) {\r\n\tthis.reset();\r\n\r\n\tif (sColor && typeof sColor === 'string' && /^[A-Fa-f0-9]{6}$/.test(sColor)) {\r\n\t\tthis.fill.type.value = 'solid';\r\n\r\n\t\t/**\r\n\t\t * Apply the provided color as forground color of the\r\n\t\t * background. We add 'FF' in front of the HEX-color\r\n\t\t * for opacity.\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'fgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'rgb',\r\n\t\t\t\t\tname: 'rgb',\r\n\t\t\t\t\tvalue: 'FF' + sColor\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * Add default background layer which will be used once the\r\n\t\t * foreground color uses transparency\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\ttag: 'bgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'indexed',\r\n\t\t\t\t\tvalue: '64'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns the current Fill type.\r\n *\r\n * @returns {string} - Current Fill type\r\n */\r\nFill.prototype.getType = function() {\r\n\treturn this.fill.type.value;\r\n};\r\n\r\n/**\r\n * Assigns the given type as Fill type. The Fill will be reset to\r\n * default before the type is applied.\r\n *\r\n * @param {string} sType - Type that needs to be assigned\r\n */\r\nFill.prototype.setType = function(sType) {\r\n\tthis.reset();\r\n\r\n\tthis.fill.type.value = sType;\r\n};\r\n\r\n/**\r\n * Resets the current fill to avoid side effects that might occur\r\n * when the fill is modified.\r\n */\r\nFill.prototype.reset = function() {\r\n\tthis.fill.type.value = 'none';\r\n\tthis.fill.childs.length = 0;\r\n};\r\n\r\nmodule.exports = Fill;\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * This class represents border configuration for Office Open XML Spreadsheets.\r\n * @constructor\r\n */\r\nfunction Border() {\r\n\tXMLNode.call(this, Border.metadata);\r\n}\r\n\r\nBorder.prototype = Object.create(XMLNode.prototype);\r\nBorder.prototype.constructor = Border;\r\n\r\nBorder.metadata = {\r\n\ttag: 'border',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'left'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'right'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'top'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'bottom'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'diagonal'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Border is equal to the given parameter.\r\n *\r\n * @param {Border} oBorder - Border that get's compared to the current one\r\n * @return {boolean} - Returns true if both Borders have the same configuration\r\n */\r\nBorder.prototype.equals = function(oBorder) {\r\n\r\n\t/**\r\n\t * Once it is a Border object we always return true because we\r\n\t * don't provide more than one border type\r\n\t */\r\n\treturn oBorder instanceof Border;\r\n};\r\n\r\nmodule.exports = Border;\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The NumberFormat class is used to store custom formatting for\r\n * numeric values. In addition to a variety of built-in formats that\r\n * cannot be used as identifier for a particular format, the user can\r\n * create up to 250 different number formats.\r\n *\r\n * (https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3)\r\n *\r\n * @param {Object} oData - Configuration object that is used for initialization\r\n * @param {string} oData.format - Custom format that will be applied\r\n * @constructor\r\n */\r\nfunction NumberFormat(oData) {\r\n\tXMLNode.call(this, NumberFormat.metadata);\r\n\r\n\tthis.format.value = oData && oData.format ? oData.format : NumberFormat.DEFAULT;\r\n}\r\n\r\nNumberFormat.prototype = Object.create(XMLNode.prototype);\r\nNumberFormat.prototype.constructor = NumberFormat;\r\n\r\nNumberFormat.metadata = {\r\n\ttag: 'numFmt',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'formatId',\r\n\t\t\tname: 'numFmtId'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\tname: 'formatCode'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nNumberFormat.BUILTIN_IDS = [ 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15,\r\n\t16, 17, 18, 19, 20, 21, 22, 37, 38, 39, 40, 45, 46, 47, 48, 49 ];\r\nNumberFormat.ID_OFFSET = 166;\r\nNumberFormat.DEFAULT = '#,##0.00';\r\n\r\n/**\r\n * This method returns the ID of this NumberFormat. If there was no\r\n * ID assigned yet, it will return undefined.\r\n *\r\n * @returns {number} - The ID of this NumberFormat\r\n */\r\nNumberFormat.prototype.getId = function() {\r\n\treturn this.formatId.value;\r\n};\r\n\r\n\r\n/**\r\n * Returns the format of this NumberFormat as a string.\r\n *\r\n * @returns {string} - The format template that gets applied\r\n */\r\nNumberFormat.prototype.getFormat = function() {\r\n\treturn this.format.value;\r\n};\r\n\r\n\r\n/**\r\n * Assigns the provided ID to the current NumberFormat.\r\n *\r\n * @param {number|string} sId - The ID of this NumberFormat that can be referenced\r\n */\r\nNumberFormat.prototype.setId = function(sId) {\r\n\tvar iId = typeof sId === 'number' ? sId : parseInt(sId, 10);\r\n\r\n\t/* Checks if NaN, below zero or builtin ID */\r\n\tif (isNaN(iId) || iId < 0 || NumberFormat._isBuiltin(iId)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.formatId.value = sId;\r\n};\r\n\r\n\r\n/**\r\n * Sets a specific format.\r\n *\r\n * @param {string} sFormat - The format that gets applied by this NumberFormat\r\n */\r\nNumberFormat.prototype.setFormat = function(sFormat) {\r\n\tthis.format.value = sFormat;\r\n};\r\n\r\n\r\n/**\r\n * Checks if a given ID is a builtin ID or not. Builtin IDs cannot be used for custom NumberFormats.\r\n *\r\n * @param {number} iId - ID that needs to be checked if it is a builtin ID\r\n *\r\n * @returns {boolean} - Returns true if the provided ID is a builtin ID that cannot be used\r\n * @private\r\n */\r\nNumberFormat._isBuiltin = function(iId) {\r\n\treturn NumberFormat.BUILTIN_IDS.indexOf(iId) > -1;\r\n};\r\n\r\n\r\n/**\r\n * Compares another NumberFormat to the current one. This method will\r\n * match NumberFormat objects by its format regardless of their ID.\r\n *\r\n * @param {NumberFormat} oNumberFormat - The NumberFormat to compare with\r\n * @returns {boolean} - Returns true if the format template is equal to the one from the compared object\r\n */\r\nNumberFormat.prototype.equals = function(oNumberFormat) {\r\n\tif (!(oNumberFormat instanceof NumberFormat)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFormat() === oNumberFormat.getFormat();\r\n};\r\n\r\nmodule.exports = NumberFormat;\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * This class represents the workbook.xml file within the generated\r\n * Office Open XML Spreadsheet. The workbook is the central element\r\n * of the Office Open XML Spreadsheet that references all the content.\r\n *\r\n * @constructor\r\n */\r\nfunction Workbook() {\r\n\tXMLNode.call(this, Workbook.metadata);\r\n\r\n\t// Adds a default sheet so there is at least on sheet present\r\n\tthis.addSheet('SAP Document Export');\r\n}\r\n\r\nWorkbook.prototype = Object.create(XMLNode.prototype);\r\nWorkbook.prototype.constructor = Workbook;\r\n\r\nWorkbook.metadata = {\r\n\ttag: 'workbook',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'bookViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'workbookView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'yWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowWidth',\r\n\t\t\t\t\t\t\tvalue: '22260'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowHeight',\r\n\t\t\t\t\t\t\tvalue: '12645'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'sheets',\r\n\t\t\ttag: 'sheets'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nWorkbook.prototype.addSheet = function(sName) {\r\n\tvar count = this.sheets.childs.length + 1;\r\n\tvar sheet = new XMLNode({\r\n\t\ttag: 'sheet',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'name',\r\n\t\t\t\tvalue: sName\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'sheetId',\r\n\t\t\t\tvalue: '' + count\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'id',\r\n\t\t\t\tprefix: 'r',\r\n\t\t\t\tvalue: 'rId' + count\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n\r\n\tthis.sheets.addChild(sheet);\r\n};\r\n\r\nmodule.exports = Workbook;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// XLSXBuilder.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 905e76c5673bd8746125","var XMLElement = require('./XMLElement');\r\nvar XMLAttribute = require('./XMLAttribute');\r\n\r\n/**\r\n * JSON representation of XML nodes. Each node has a tag an can have multiple {@link XMLAttribute} entries assigned.\r\n * It can also have multiple child {@link XMLNode} elements assigned. The node can contain a value.\r\n *\r\n * @param {object|string} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.tag - String representation of the XML tag.\r\n * @param {object[]} [oConfig.attributes] - Aggregation for adding {@link XMLAttributes} to the current node.\r\n * @param {object[]} [oConfig.properties] - Aggregation for adding {@link XMLNode} objects as child objects to this node\r\n * @param {string} [oConfig.value] - String value inside the XML tag.\r\n * @class\r\n * @module xml/XMLNode\r\n */\r\nfunction XMLNode(oConfig) {\r\n\tvar i, j, config;\r\n\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\t/* Shorthand functionality to simply assign the XMLNode tag name instead of a configuration object */\r\n\tconfig = typeof oConfig === 'string' ? {tag: oConfig} : oConfig;\r\n\r\n\tObject.defineProperty(this, 'root', {value: !!config.root, writable: false});\r\n\tthis.tag = typeof config.tag == 'string' ? config.tag : '';\r\n\tthis.attributes = [];\r\n\tthis.childs = [];\r\n\r\n\t/* Initialize the XML node by filling the aggregations if present */\r\n\tif (config.attributes) {\r\n\t\tfor (i = 0; i < config.attributes.length; i++) {\r\n\t\t\tthis.addAttribute(config.attributes[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tif (config.properties) {\r\n\t\tfor (j = 0; j < config.properties.length; j++) {\r\n\t\t\tthis.addChild(config.properties[j]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXMLNode.prototype = Object.create(XMLElement.prototype);\r\nXMLNode.prototype.constructor = XMLNode;\r\n\r\nXMLNode.processingInformation = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\r\n\r\n\r\n/**\r\n * Adds the provided XMLAttribute object to the XMLNode.\r\n * If no XMLAttribute is provided it will create one instead.\r\n * The method returns the XMLAttribute for chaining.\r\n *\r\n * @function addAttribute\r\n * @param {Object} oConfig - XMLAttribute or configuration object that represents a XMLAttribute\r\n * @returns {Object} - An instance of XMLAttribute that was added to this node\r\n */\r\nXMLNode.prototype.addAttribute = function(oConfig) {\r\n\tvar attribute = oConfig instanceof XMLAttribute ? oConfig : new XMLAttribute(oConfig);\r\n\r\n\tthis.attributes.push(attribute);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: attribute, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn attribute;\r\n};\r\n\r\n\r\n/**\r\n * Adds the provided XMLNode object as child to the current XMLNode.\r\n * If no XMLNode is provided it will create one instead.\r\n * The method returns the XMLNode for chaining.\r\n *\r\n * @function addChild\r\n * @param {Object} oConfig - XMLNode or configuration object that represents a XMLNode\r\n * @returns {object} - An instance of XMLNode that was added to this node\r\n */\r\nXMLNode.prototype.addChild = function(oConfig) {\r\n\r\n\t/* Additional Attributes of the child node will be added in the Constructor */\r\n\tvar node = oConfig instanceof XMLNode ? oConfig : new XMLNode(oConfig);\r\n\r\n\tthis.childs.push(node);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: node, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\n\r\n/**\r\n * Removes the property from this object and also deletes the\r\n * referenced item within the child nodes or attributes\r\n * aggregation.\r\n *\r\n * The method returns the previously referenced object or null if\r\n * the property name is not present on this particular XMLNode or\r\n * if no item is referenced.\r\n *\r\n * Builtin properties of XMLNode cannot be removed with this\r\n * function. These are \"root\", \"tag\", \"attributes\", \"childs\",\r\n * \"value\".\r\n *\r\n * @param {string} sProperty - Name of the property that should be removed\r\n * @returns {XMLNode|XMLAttribute|null} - The referenced object that gets removed as well\r\n */\r\nXMLNode.prototype.remove = function(sProperty) {\r\n\tvar index, referencedElement, aAggregation;\r\n\r\n\t/* Only proceed if property is present */\r\n\tif (!(sProperty in this)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treferencedElement = this[sProperty];\r\n\r\n\t/* Check if referenced element is a XMLAttribute */\r\n\tif (referencedElement instanceof XMLAttribute) {\r\n\t\taAggregation = this.attributes;\r\n\t} else if (referencedElement instanceof XMLNode && !(sProperty in new XMLNode(''))) {\r\n\t\taAggregation = this.childs;\r\n\t} else {\r\n\r\n\t\t/* Early return if referenced element is neither an XMLAttribute nor XMLNode */\r\n\t\treturn null;\r\n\t}\r\n\r\n\tindex = aAggregation.indexOf(referencedElement);\r\n\taAggregation.splice(index, 1); // It is ensured that index > -1 otherwise #addChild or #addAttribute fail\r\n\tdelete this[sProperty];\r\n\r\n\treturn referencedElement;\r\n};\r\n\r\n/**\r\n * Allows recursive serialization of the object and its descendants. If the XMLNode is marked as root node,\r\n * it will automatically add the XML processing information in front of the serialized representation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLNode.\r\n */\r\nXMLNode.prototype.serialize = function() {\r\n\tvar sSerialized, i, j;\r\n\r\n\tsSerialized = (this.root ? XMLNode.processingInformation : '') + '<' + this.tag;\r\n\r\n\t/* Insert attributes including namespace information */\r\n\tfor (i = 0; i < this.attributes.length; i++) {\r\n\t\tsSerialized += this.attributes[i].serialize();\r\n\t}\r\n\r\n\t/* Insert child nodes and value */\r\n\tif (this.childs.length || this.value || typeof this.value === 'number') {\r\n\t\tsSerialized += '>';\r\n\r\n\t\tfor (j = 0; j < this.childs.length; j++) {\r\n\t\t\tsSerialized += typeof this.childs[j] === 'string' ? this.childs[j] : this.childs[j].serialize();\r\n\t\t}\r\n\t\tsSerialized += this.xmlEncode(this.value);\r\n\r\n\t\tsSerialized += '</' + this.tag + '>';\r\n\t} else {\r\n\r\n\t\t/* Shorthand tag support */\r\n\t\tsSerialized += '/>';\r\n\t}\r\n\r\n\treturn sSerialized;\r\n};\r\n\r\nmodule.exports = XMLNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/xml/XMLNode.js\n// module id = 0\n// module chunks = 0","/**\r\n * The Type class defines a supported data type, like strings,\r\n * numeric values, decimals, dates, currencies and so on. It is NOT\r\n * part of the XML representation of the generated Excel document.\r\n *\r\n * This class is marked as abstract therefore only its sub-classes\r\n * should be used.\r\n *\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction Type() {\r\n\tthis.styleId = null;\r\n}\r\n\r\n/**\r\n * Creates the type specific configuration that is used to register\r\n * its corresponding style in the Styles class.\r\n *\r\n * @abstract\r\n * @private\r\n */\r\nType.prototype._createConfiguration = function() {\r\n\tthrow new Error('Abstract method must be implemented by its subclass!');\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @returns {number} - ID of the registered Style\r\n */\r\nType.prototype.getStyleId = function() {\r\n\tif (this.styleId === null) {\r\n\t\tthis.styleId = this.styles.addStyle(this._createConfiguration());\r\n\t}\r\n\r\n\treturn this.styleId;\r\n};\r\n\r\n/**\r\n * Registers the Style configuration of this Type in the given Styles\r\n * class.\r\n *\r\n * @param {Styles} oStyles - Styles instance where the Type specific styling will be registered\r\n */\r\nType.prototype.registerAt = function(oStyles) {\r\n\tthis.styles = oStyles;\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type.\r\n *\r\n * @param {string} property - Name of the property that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nType.prototype.getValue = function(property, oData) {\r\n\treturn oData[property];\r\n};\r\n\r\nmodule.exports = Type;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/binding/type/Type.js\n// module id = 1\n// module chunks = 0","var XMLNode\t\t \t= require('../xml/XMLNode'),\r\n\tCalendarDate \t= require('../binding/type/CalendarDate'),\r\n\tNumeric \t\t= require('../binding/type/Numeric'),\r\n\tBooleanType \t= require('../binding/type/BooleanType'),\r\n\tCurrency \t\t= require('../binding/type/Currency'),\r\n\tSharedStrings   = require('../data/SharedStrings');\r\n\r\n/**\r\n * The Cell class represents a single cell within the spreadsheet\r\n * that has to be assigned to a particular row. A Cell stores\r\n * information supporting several types of data.\r\n *\r\n * @param {Type} oType - The data type of the cell\r\n * @class\r\n */\r\nfunction Cell(oType) {\r\n\tXMLNode.call(this, Cell.metadata);\r\n\r\n\tthis._applyType(oType);\r\n}\r\n\r\nCell.prototype = Object.create(XMLNode.prototype);\r\nCell.prototype.constructor = Cell;\r\n\r\nCell.DataType = {\r\n\tBoolean: 'b',\r\n\tDate: 'd',\r\n\tInlineString: 'inlineStr', // We do not support inline strings\r\n\tNumber: 'n',\r\n\tSharedString: 's',\r\n\tFormularString: 'str'\r\n};\r\n\r\n/**\r\n * Converts a JavaScript Date object to an Office Open XML date\r\n * representation. Office Open XML date epoch starts at 00.01.1900\r\n * which is 31.12.1899 and is represented as a number of days since\r\n * beginning of the epoch.\r\n *\r\n * The Javascript Date epoch starts at 01.01.1970 and is represented\r\n * as a number of milliseconds before or after the beginning of the\r\n * epoch.\r\n *\r\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\r\n * 25567. According to the wrong offset in Excel (31.12.1899 instead\r\n * of 01.01.1900) and the known leap year bug in Excel, we need to\r\n * add two additional days.\r\n *\r\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\r\n *\r\n *\r\n * @param {Object} oDate - JavaScript Date object\r\n * @returns {number} - Amount of days since 01.01.1900\r\n * @private\r\n */\r\nCell._JsDateToExcel = function(oDate) {\r\n\treturn (oDate.getTime() / (86400 * 1000)) + (25567 + 2);\r\n};\r\n\r\n\r\nCell.metadata = {\r\n\ttag: 'c',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'style',\r\n\t\t\tname: 's',\r\n\t\t\tvalue: '0' // Default style id\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 'v'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Applies the given type to the current Cell and maps to the\r\n * corresponding Office Open XML type definition.\r\n *\r\n * @param {Type} oType - Value of type {@link Type}\r\n * @private\r\n */\r\nCell.prototype._applyType = function(oType) {\r\n\tObject.defineProperty(this, 'type', { value: Cell.DataType.SharedString, writable: true });\r\n\r\n\tswitch (oType.constructor) {\r\n\t\tcase CalendarDate:\r\n\t\t\tthis.type = Cell.DataType.Date;\r\n\t\t\tbreak;\r\n\t\tcase Numeric:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\t\t\tbreak;\r\n\t\tcase BooleanType:\r\n\t\t\tthis.type = Cell.DataType.Boolean;\r\n\r\n\t\t\tif (!oType.isCustomFormatted()) {\r\n\t\t\t\tthis.addAttribute({\r\n\t\t\t\t\tname: 't',\r\n\t\t\t\t\tvalue: Cell.DataType.Boolean\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\tcase Currency:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\t\t\tbreak;\r\n\t\tdefault: // Text is the default case\r\n\t\t\tthis.addAttribute({\r\n\t\t\t\tname: 't',\r\n\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\r\n\t\t\t});\r\n\t\t\tthis.type = Cell.DataType.SharedString;\r\n\t}\r\n\r\n\tthis.bindingType = oType;\r\n};\r\n\r\n/**\r\n * Applies the specified Style to the cell.\r\n *\r\n * @param {number|string} nStyle - Instance of Excel.objects.Style\r\n */\r\nCell.prototype.setStyle = function(nStyle) {\r\n\tthis.style.value = nStyle;\r\n};\r\n\r\n/**\r\n * Applies the specified cell location as reference. The reference\r\n * must match the regular expression of Open Document SpreadsheetML\r\n * sheet format. Starting with at least one uppercase letter for the\r\n * column followed by a number without leading zeros for the row.\r\n * [A-Z]+[1-9]+[0-9]*\r\n *\r\n * @param {string} sReference - Reference of the cells' location\r\n */\r\nCell.prototype.setReference = function(sReference) {\r\n\tif (typeof sReference != 'string'\r\n\t\t|| !sReference.match(/^[A-Z]+[1-9]+[0-9]*$/g)) {\r\n\t\tthrow new Error('The given Cell reference \"' + sReference + '\" does not match the reference pattern.');\r\n\t}\r\n\r\n\tthis.reference.value = sReference;\r\n};\r\n\r\n/**\r\n * Assigns the value to the current Cell. The method requires either\r\n * an shared String proxy object or an inline String. This method can\r\n * only be called once per Cell!\r\n *\r\n * @param {(string|Array)} sProperty - single property or Array of properties\r\n * @param {Object} oBusinessObject - BusinessObject that gets bound to this Cell\r\n */\r\nCell.prototype.setValue = function(sProperty, oBusinessObject) {\r\n\tvar date, shared, value;\r\n\r\n\tvalue = this.bindingType.getValue(sProperty, oBusinessObject);\r\n\r\n\tif (!this._isValuePresent(value)) {\r\n\r\n\t\t/*\r\n\t\t * We need to clear the value due to the fact\r\n\t\t * that we are re-using the Cell for each row\r\n\t\t */\r\n\t\tthis.text.value = '';\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tswitch (this.type) {\r\n\t\tcase Cell.DataType.Number:\r\n\t\t\tthis.text.value = value;\r\n\t\t\tbreak;\r\n\r\n\t\tcase Cell.DataType.Boolean:\r\n\r\n\t\t\t/* String representations other than \"true\" will result in the boolean value false */\r\n\t\t\tif (typeof value === 'string') {\r\n\t\t\t\tvalue = value.toLowerCase() === 'true';\r\n\t\t\t}\r\n\t\t\tthis.text.value = value ? '1' : '0';\r\n\t\t\tbreak;\r\n\r\n\t\tcase Cell.DataType.Date:\r\n\t\t\tif (value instanceof Date) {\r\n\t\t\t\tdate = value;\r\n\t\t\t} else if (typeof value === 'number') {\r\n\t\t\t\tdate = new Date(value);\r\n\t\t\t} else {\r\n\t\t\t\tdate = new Date(parseInt(value, 10));\r\n\t\t\t}\r\n\r\n\t\t\tthis.text.value = Cell._JsDateToExcel(date);\r\n\t\t\t// TODO implement a fallback if the date is before 01.01.1900\r\n\t\t\t// Check if date is before new Date(-2208988800000) which is UTC 01.01.1900 00:00:00\r\n\t\t\tbreak;\r\n\r\n\t\tdefault: // SharedString is the default case\r\n\t\t\tshared = SharedStrings.getInstance();\r\n\t\t\tthis.text.value = shared.insert(value);\r\n\t}\r\n\r\n\t/*\r\n\t * Forces a style update once the value changed. This allows cell\r\n\t * specific styles for currency types. Due to the fact that the\r\n\t * Style ID gets cached within the Type, there is no performance\r\n\t * impact even on large data sets.\r\n\t */\r\n\tthis.setStyle(this.bindingType.getStyleId(oBusinessObject));\r\n};\r\n\r\n/**\r\n * Checks whether there is a value provided or not. Allowed values\r\n * are Stringsas well as numeric and boolean values. Empty Strings\r\n * will be evaluated as no value, but the numeric value 0 is a value.\r\n *\r\n * @param {(string|number|boolean|Array)} data - The value that gets checked\r\n * @returns {boolean} - true if a value is present, false if not\r\n * @private\r\n */\r\nCell.prototype._isValuePresent = function(data) {\r\n\treturn ((typeof data === 'string' && !!data)\r\n\t\t|| typeof data === 'number'\r\n\t\t|| typeof data === 'boolean'\r\n\t\t|| data instanceof Date);\r\n};\r\n\r\nmodule.exports = Cell;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/data/Cell.js\n// module id = 2\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The Numeric class represents a numeric data type. Numeric data can\r\n * handle several options like thousands delimiter, decimal (scale)\r\n * and different types like 'percent' and 'exponential'.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {boolean} [oConfig.delimiter] - Indicates if a thousands delimiter should be used\r\n * @param {number} [oConfig.scale] - Defines the amount of decimals\r\n * @param {string} [oConfig.type] - Applies a specific type like 'exponential' or 'percent'\r\n * @param {string} [oConfig.unit] - Specifies a particular unit of measurement\r\n * @param {string} [oConfig.unitProperty] - Specifies a property that contains the unit of measurement\r\n * @constructor\r\n */\r\nfunction Numeric(oConfig) {\r\n\tType.call(this);\r\n\r\n\tthis.unit = oConfig ? oConfig.unit : null;\r\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\r\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\r\n\tthis.scale = oConfig ? oConfig.scale : null;\r\n\r\n\tthis.styleIds = {};\r\n}\r\n\r\nNumeric.prototype = Object.create(Type.prototype);\r\nNumeric.prototype.constructor = Numeric;\r\n\r\nNumeric.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\nNumeric.builtin = {\r\n\t1: '0',\r\n\t2: '0.00',\r\n\t3: '#,##0',\r\n\t4: '#,##0.00',\r\n\t9: '0%',\r\n\t10: '0.00%',\r\n\t11: '0.00E+00',\r\n\t12: '# ?/?',\r\n\t13: '# ??/??',\r\n\t37: '#,##0;(#,##0)',\r\n\t38: '#,##0;[Red](#,##0)',\r\n\t39: '#,##0.00;(#,##0.00)',\r\n\t40: '#,##0.00;[Red](#,##0.00)',\r\n\t48: '##0.0E+0'\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @param {Object} oData - Business object that contains additional data that is used for the formatting\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @private\r\n */\r\nNumeric.prototype._createConfiguration = function(oData) {\r\n\tvar i, key, result,\r\n\t\ttemplate = Numeric.builtin[1],\r\n\t\tunit = '';\r\n\r\n\tif (!this.delimiter && typeof this.scale !== 'number') {\r\n\t\treturn Numeric.DEFAULT;\r\n\t}\r\n\r\n\tif (this.delimiter) {\r\n\t\ttemplate = '#,##' + template;\r\n\t}\r\n\r\n\t/* Add decimal*/\r\n\tif (typeof this.scale === 'number' && this.scale > 0) {\r\n\t\ttemplate += '.';\r\n\r\n\t\tfor (i = 0; i < this.scale; i++) {\r\n\t\t\ttemplate += '0';\r\n\t\t}\r\n\t}\r\n\r\n\t/* Obtain unit of measurement if available */\r\n\tif (typeof this.unitProperty === 'string' && oData) {\r\n\t\tunit = ' \"' + oData[this.unitProperty] + '\"';\r\n\t} else if (typeof this.unit === 'string') {\r\n\t\tunit = ' \"' + this.unit + '\"';\r\n\t}\r\n\r\n\t/* Apply Unit */\r\n\ttemplate += unit;\r\n\r\n\tresult = {\r\n\t\tnumberFormat: {\r\n\t\t\tformat: template\r\n\t\t}\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in Numeric.builtin) {\r\n\t\tif (Numeric.builtin[key] === template) {\r\n\t\t\tresult.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for the UoM\r\n * @returns {number} - ID of the registered Style\r\n */\r\nNumeric.prototype.getStyleId = function(oData) {\r\n\tvar styleId, unit;\r\n\r\n\t/* Handle simple numeric without unitProperty */\r\n\tif (!this.unitProperty) {\r\n\t\treturn Object.getPrototypeOf(Numeric.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tunit = oData[this.unitProperty];\r\n\tstyleId = this.styleIds[unit];\r\n\r\n\tif (typeof styleId === 'undefined') {\r\n\t\tthis.styleIds[unit] = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleIds[unit];\r\n};\r\n\r\nmodule.exports = Numeric;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/binding/type/Numeric.js\n// module id = 3\n// module chunks = 0","/**\r\n * The XMLElement is an abstract base class that can store a\r\n * particular value and escape XML specific characters.\r\n *\r\n * @param {Object} oConfig - Configuration object that contains the value of this XML Element\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction XMLElement(oConfig) {\r\n\tthis.value = oConfig && oConfig.value ? oConfig.value : '';\r\n}\r\n\r\n/**\r\n * Escapes the given String value to fulfill the requirements of\r\n * XML encoded characters. If the String does not contain any\r\n * character that needs to be encoded, the original String will\r\n * be returned.\r\n *\r\n * This significantly increases the performance because the\r\n * initial regular expression match is much faster than the\r\n * String replace function. We assume that only a few Strings\r\n * need to be encoded.\r\n *\r\n * The following characters need to be encoded:\r\n * < (lower than)\r\n * > (greater than)\r\n * \" (quotes)\r\n * ' (apostrophe)\r\n * & (ampersand)\r\n *\r\n * @param {string} sValue - The value that needs to be XML encoded\r\n * @returns {string} - XML encoded String\r\n */\r\nXMLElement.prototype.xmlEncode = function(sValue) {\r\n\treturn typeof sValue === 'string' && sValue.match(/[><\"'&]+/) !== null ? this._replace(sValue) : sValue;\r\n};\r\n\r\n/**\r\n * @see _xmlEncode\r\n * @param {string} sValue - The string that contains characters that needs to be replaced\r\n * @returns {string} - XML encoded String\r\n * @private\r\n */\r\nXMLElement.prototype._replace = function(sValue) {\r\n\r\n\t/**\r\n\t * Perform ampersand replacement first to avoid encoding the\r\n\t * control ampersand of other encoded characters.\r\n\t *\r\n\t * i.E. >& should be encoded as &gt;&amp; instead of &amp;gt;&amp;\r\n\t */\r\n\treturn sValue\r\n\t\t.replace(/&/g, '&amp;')\r\n\t\t.replace(/</g, '&lt;')\r\n\t\t.replace(/>/g, '&gt;')\r\n\t\t.replace(/\"/g, '&quot;')\r\n\t\t.replace(/'/g, '&apos;');\r\n};\r\n\r\nmodule.exports = XMLElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/xml/XMLElement.js\n// module id = 4\n// module chunks = 0","var Cell\t\t\t= require('../data/Cell'),\r\n\tCalendarDate \t= require('../binding/type/CalendarDate'),\r\n\tNumeric \t\t= require('../binding/type/Numeric'),\r\n\tCurrency \t\t= require('../binding/type/Currency'),\r\n\tBooleanType \t= require('../binding/type/BooleanType'),\r\n\tText\t\t \t= require('../binding/type/Text');\r\n\r\n/**\r\n * The Column class represents the field type of columns. It handles\r\n * styling, data types and data binding.\r\n *\r\n * @param {(Object|string)} oData - Data object representing the Column configuration\r\n * @param {string} oData.property - References the data object property that is bound as value for this column\r\n * @param {string} [oData.align] - Optional alignment. Default: Column.Align.Left\r\n * @param {string} [oData.label] - Optional column label that will be shown in the header row\r\n * @param {string} [oData.type] - Optional data type for this column. Default: Column.Type.Text\r\n * @param {string} [oData.width] - Optional width of the\r\n * @param {Styles} oStyles - Styles collection that is needed to register each Style a Column uses\r\n * @class\r\n * @module binding/Column\r\n */\r\nfunction Column(oData, oStyles) {\r\n\tvar oColumnData;\r\n\r\n\t/* Fallback assignment if only a key is provided */\r\n\toColumnData = typeof oData === 'string' ? {property: oData} : oData;\r\n\tif (!oColumnData || !oColumnData.property) { throw new Error('The property for the column is not defined'); }\r\n\r\n\tthis.align = oColumnData.align ? oColumnData.align : Column.Align.Left;\r\n\tthis.property = oColumnData.property;\r\n\tthis.label = oColumnData.label ? oColumnData.label : oColumnData.property;\r\n\tthis.width = oColumnData.width;\r\n\tthis.styles = oStyles;\r\n\tthis.type = this._initType(oColumnData);\r\n}\r\n\r\nColumn.Align = {\r\n\tLeft: 'left',\r\n\tCenter: 'center',\r\n\tRight: 'right'\r\n};\r\n\r\n/**\r\n * Initializes the data type for this Column. Type specific\r\n * formatting information will be evaluated and applied.\r\n *\r\n * @param {Object} oData - Configuration object for this Column that also contains type and formatting information\r\n * @param {string} oData.type - Specifies the data type\r\n * @param {boolean} [oData.delimiter] - Specifies if a thousands delimiter is shown\r\n * @param {number} [oData.scale] - Specifies the the decimal scale\r\n * @param {string} [oData.calendar] - Specifies the calendar if type is date, datetime or time\r\n * @param {string} [oData.format] - Specifies a custom format if type is date, datetime or time\r\n * @param {string} [oData.unit] - Specifies the UoM if type is number.\r\n * @param {string} [oData.unitProperty] - Name of the property that contains the UoM if type is number or currency.\r\n * @param {boolean} [oData.displayUnit] - Specifies if the UoM will be shown or not if type is number or currency.\r\n * @param {string} [oData.trueValue] - Specifies the displayed value if the boolean type has the value true.\r\n * @param {string} [oData.falseValue] - Specifies the displayed value if the boolean type has the value false.\r\n * @param {string} [oData.template] - Specifies a template string that can be filled with several properties.\r\n *\r\n * @returns {Type} - Returns the specific Type object that contains all the formatting\r\n * @private\r\n */\r\nColumn.prototype._initType = function(oData) {\r\n\tvar type, sType;\r\n\r\n\tsType = oData.type;\r\n\r\n\tif (sType === 'date' || sType === 'datetime' || sType === 'time') {\r\n\t\ttype = new CalendarDate({\r\n\t\t\tcalendar: oData.calendar,\r\n\t\t\tformat: oData.format,\r\n\t\t\ttype: sType\r\n\t\t});\r\n\t} else if (sType === 'number' || sType === 'percent' || sType === 'exponent') {\r\n\t\ttype = new Numeric({\r\n\t\t\tdelimiter: oData.delimiter,\r\n\t\t\tscale: oData.scale,\r\n\t\t\ttype: oData.type,\r\n\t\t\tunit: oData.unit,\r\n\t\t\tunitProperty: oData.unitProperty\r\n\t\t});\r\n\t} else if (sType === 'currency') {\r\n\t\ttype = new Currency({\r\n\t\t\ttype: sType,\r\n\t\t\tunitProperty: oData.unitProperty,\r\n\t\t\tdisplayUnit: oData.displayUnit,\r\n\t\t\tscale: oData.scale\r\n\t\t});\r\n\t} else if (sType === 'boolean') {\r\n\t\ttype = new BooleanType({\r\n\t\t\ttrueValue: oData.trueValue,\r\n\t\t\tfalseValue: oData.falseValue\r\n\t\t});\r\n\t} else {\r\n\t\ttype = new Text({\r\n\t\t\ttype: 'text',\r\n\t\t\ttemplate: oData.template\r\n\t\t});\r\n\t}\r\n\r\n\ttype.registerAt(this.styles);\r\n\r\n\treturn type;\r\n};\r\n\r\n/**\r\n * Returns the Cell object that is referenced by this particular\r\n * Column. Every Column references only one single Cell that gets\r\n * reused for each and every Row.\r\n *\r\n * When binding the actual data to a row, the Cell content, its\r\n * references and its styling get updated and a serialized version\r\n * of the row is stored within the sheet.\r\n *\r\n * @returns {Cell} - The Cell that belongs to this particular Column\r\n */\r\nColumn.prototype.getCell = function() {\r\n\tif (!this.cell) {\r\n\t\tthis.cell = new Cell(this.type);\r\n\t}\r\n\r\n\treturn this.cell;\r\n};\r\n\r\n/**\r\n * This method binds the actual business object property to the columns cell.\r\n *\r\n * @param {object} oData - Business object that gets bound to the Cell of this Column.\r\n */\r\nColumn.prototype.bind = function(oData) {\r\n\r\n\t/*\r\n\t * Due to the fact that Cell#setValue updates the Style depending\r\n\t * on the actual Cell value (i.E. Unit of Measurement for\r\n\t * Currencies), we need to provide the original business object\r\n\t * so that the Cell knows the whole business object instead of\r\n\t * just the value of its particular property.\r\n\t */\r\n\tthis.cell.setValue(this.property, oData);\r\n};\r\n\r\nmodule.exports = Column;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/binding/Column.js\n// module id = 5\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The CalendarDate class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] - A configuration object that is used to specify the formatting\r\n * @param {string} [oConfig.type] - The specific type for this CalendarDate (i.E. date, datetime, time)\r\n * @param {string} [oConfig.format] - A custom format string that will be used as template\r\n * @param {string} [oConfig.calendar] - Specifies the calendar that will be used (default: gregorian)\r\n * @constructor\r\n */\r\nfunction CalendarDate(oConfig) {\r\n\tType.call(this);\r\n\r\n\tthis.type = oConfig ? oConfig.type : null;\r\n\tthis.format = oConfig ? oConfig.format : null;\r\n\tthis.calendar = oConfig ? oConfig.calendar : null;\r\n}\r\n\r\nCalendarDate.prototype = Object.create(Type.prototype);\r\nCalendarDate.prototype.constructor = CalendarDate;\r\n\r\nCalendarDate.DEFAULT = {\r\n\tnumberFormat: 14\r\n};\r\n\r\nCalendarDate.builtin = {\r\n\t14: 'mm-dd-yy',\r\n\t15: 'd-mmm-yy',\r\n\t16: 'd-mmm',\r\n\t17: 'mmm-yy',\r\n\t18: 'h:mm AM/PM',\r\n\t19: 'h:mm:ss AM/PM',\r\n\t20: 'h:mm',\r\n\t21: 'h:mm:ss',\r\n\t22: 'm/d/yy h:mm',\r\n\t45: 'mm:ss',\r\n\t46: '[h]:mm:ss',\r\n\t47: 'mmss.0'\r\n};\r\n\r\n/**\r\n * Creates the Style configuration object for this CalendarDate\r\n * according to its configuration.\r\n *\r\n * @returns {Object} - Style descriptor object\r\n * @private\r\n */\r\nCalendarDate.prototype._createConfiguration = function() {\r\n\tvar key, result, template;\r\n\r\n\tif (!this.type && !this.format && !this.calendar) {\r\n\t\treturn CalendarDate.DEFAULT;\r\n\t}\r\n\r\n\t/* Evaluate type */\r\n\tswitch (this.type) {\r\n\t\tcase 'datetime':\r\n\t\t\ttemplate = CalendarDate.builtin[22];\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\ttemplate = CalendarDate.builtin[21];\r\n\t\t\tbreak;\r\n\t\tdefault: // Assume 'date' as default\r\n\t\t\ttemplate = CalendarDate.builtin[14];\r\n\t}\r\n\r\n\tif (typeof this.format === 'string') {\r\n\t\ttemplate = this.format.match(/^[dhmsy\\s-,.:/]+(AM\\/PM)?$/) ? this.format : template;\r\n\t}\r\n\r\n\t/* Evaluate calendar */\r\n\tswitch (this.calendar) {\r\n\t\tcase 'islamic':\r\n\t\t\ttemplate = 'b2d mmmm yyyy';\r\n\t\t\tbreak;\r\n\t\tcase 'japanese':\r\n\t\t\ttemplate = '[$-ja-JP]ge.m.d';\r\n\t\t\tbreak;\r\n\t\tdefault: // Gregorian calendar is the default case\r\n\t}\r\n\r\n\tresult = {\r\n\t\tnumberFormat: {\r\n\t\t\tformat: template\r\n\t\t}\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in CalendarDate.builtin) {\r\n\t\tif (CalendarDate.builtin[key] === template) {\r\n\t\t\tresult.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nmodule.exports = CalendarDate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/binding/type/CalendarDate.js\n// module id = 6\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The BooleanType class represents a boolean data type. BooleanType\r\n * data can work in two different ways. The first way is the Office\r\n * Open XML Spreadsheet built-in type that always shows TRUE/FALSE in\r\n * the users locale. This value can easily be used within formulas.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {string} [oConfig.trueValue] - Contains the value that gets displayed if the Boolean is true\r\n * @param {string} [oConfig.falseValue] - Contains the value that gets displayed if the Boolean is false\r\n * @constructor\r\n */\r\nfunction BooleanType(oConfig) {\r\n\tType.call(this);\r\n\r\n\tthis.trueValue = oConfig ? oConfig.trueValue : null;\r\n\tthis.falseValue = oConfig ? oConfig.falseValue : null;\r\n}\r\n\r\nBooleanType.prototype = Object.create(Type.prototype);\r\nBooleanType.prototype.constructor = BooleanType;\r\n\r\nBooleanType.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\n/**\r\n * This method indicates if the properties trueValue and falseValue\r\n * are configured correctly and the BooleanType supports a custom\r\n * format.\r\n *\r\n * @returns {boolean} - Whether to use a custom formatted BooleanType or the built-in type.\r\n */\r\nBooleanType.prototype.isCustomFormatted = function() {\r\n\treturn !!this.trueValue\r\n\t\t&& typeof this.trueValue === 'string'\r\n\t\t&& !!this.falseValue\r\n\t\t&& typeof this.falseValue === 'string';\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @private\r\n */\r\nBooleanType.prototype._createConfiguration = function() {\r\n\tvar result = BooleanType.DEFAULT;\r\n\r\n\tif (this.isCustomFormatted()) {\r\n\t\tresult = {\r\n\t\t\tnumberFormat: {\r\n\t\t\t\tformat: '\"' + this.trueValue + '\";;\"' + this.falseValue + '\"'\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nmodule.exports = BooleanType;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/binding/type/BooleanType.js\n// module id = 7\n// module chunks = 0","var Numeric = require('./Numeric');\r\n\r\n/**\r\n * The Currency class represents a currency data type. It handles the\r\n * formatting and accepts several options like second property for\r\n * the unit of measurement or if the unit of measurement should be\r\n * displayed.\r\n *\r\n * It styles currencies with its particular amount of decimals.\r\n *\r\n * @param {Object} oConfig - A configuration object that is used to specify the formatting\r\n * @param {string} oConfig.unitProperty - A custom format string that will be used as template\r\n * @param {boolean} [oConfig.displayUnit] - Indicating whether the unit of measurement will be shown (default: true)\r\n * @param {number} [oConfig.scale] - A fixed scale that will be applied to all cells within this column,\r\n * regardless of its particular unit of measurement\r\n * @constructor\r\n */\r\nfunction Currency(oConfig) {\r\n\tNumeric.call(this, oConfig);\r\n\r\n\tthis.displayUnit = typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\r\n}\r\n\r\nCurrency.prototype = Object.create(Numeric.prototype);\r\nCurrency.prototype.constructor = Currency;\r\n\r\n/**\r\n * Defines the display default scale that is used for alignment. This\r\n * has no effect on the technical scale of currency values. It is\r\n * only used for alignment purposes so that different currencies with\r\n * different scale are still aligned correctly.\r\n *\r\n * @type {number}\r\n */\r\nCurrency.DEFAULT_SCALE = 3;\r\n\r\nCurrency.DIGITS = {\r\n\t'ADP': 0,\r\n\t'AFN': 0,\r\n\t'ALL': 0,\r\n\t'AMD': 0,\r\n\t'BHD': 3,\r\n\t'BIF': 0,\r\n\t'BYR': 0,\r\n\t'CAD': 2,\r\n\t'CHF': 2,\r\n\t'CLF': 4,\r\n\t'CLP': 0,\r\n\t'COP': 0,\r\n\t'CRC': 0,\r\n\t'CZK': 0,\r\n\t'DEFAULT': 2,\r\n\t'DJF': 0,\r\n\t'ESP': 0,\r\n\t'GNF': 0,\r\n\t'GYD': 0,\r\n\t'HUF': 0,\r\n\t'IDR': 0,\r\n\t'IQD': 0,\r\n\t'IRR': 0,\r\n\t'ISK': 0,\r\n\t'ITL': 0,\r\n\t'JOD': 3,\r\n\t'JPY': 0,\r\n\t'KMF': 0,\r\n\t'KPW': 0,\r\n\t'KRW': 0,\r\n\t'KWD': 3,\r\n\t'LAK': 0,\r\n\t'LBP': 0,\r\n\t'LUF': 0,\r\n\t'LYD': 3,\r\n\t'MGA': 0,\r\n\t'MGF': 0,\r\n\t'MMK': 0,\r\n\t'MNT': 0,\r\n\t'MRO': 0,\r\n\t'MUR': 0,\r\n\t'OMR': 3,\r\n\t'PKR': 0,\r\n\t'PYG': 0,\r\n\t'RSD': 0,\r\n\t'RWF': 0,\r\n\t'SLL': 0,\r\n\t'SOS': 0,\r\n\t'STD': 0,\r\n\t'SYP': 0,\r\n\t'TMM': 0,\r\n\t'TND': 3,\r\n\t'TRL': 0,\r\n\t'TWD': 0,\r\n\t'TZS': 0,\r\n\t'UGX': 0,\r\n\t'UYI': 0,\r\n\t'UZS': 0,\r\n\t'VND': 0,\r\n\t'VUV': 0,\r\n\t'XAF': 0,\r\n\t'XOF': 0,\r\n\t'XPF': 0,\r\n\t'YER': 0,\r\n\t'ZMK': 0,\r\n\t'ZWD': 0\r\n};\r\n\r\n/**\r\n * Creates the Style configuration needed for registering the Type\r\n * specific styling in the Styles class.\r\n *\r\n * @param {Object} oData - Business object that gets bound to the styling template\r\n * @returns {Object} - Styling configuration object\r\n * @private\r\n */\r\nCurrency.prototype._createConfiguration = function(oData) {\r\n\tvar i, j, scale, template, unit;\r\n\r\n\ttemplate = '#,##0';\r\n\r\n\t// Apply fixed scale, only if no unitProperty is provided\r\n\tif (!this.unitProperty && typeof this.scale === 'number') {\r\n\t\tscale = this.scale;\r\n\t} else {\r\n\t\tscale = Currency.DIGITS[oData[this.unitProperty]];\r\n\t}\r\n\r\n\t/* If the currency uses the default scale */\r\n\tif (typeof scale !== 'number') {\r\n\t\tscale = Currency.DIGITS.DEFAULT;\r\n\t}\r\n\r\n\t/* Apply separator or placeholder */\r\n\ttemplate += (scale > 0) ? '.' : '_.';\r\n\r\n\tfor (i = 0; i < scale; i++) {\r\n\t\ttemplate += '0';\r\n\t}\r\n\r\n\tfor (j = Currency.DEFAULT_SCALE - scale; j > 0; j--) {\r\n\t\ttemplate += '_0';\r\n\t}\r\n\r\n\t/* Add unit of measurement if required */\r\n\tif (this.displayUnit) {\r\n\t\tunit = oData[this.unitProperty] ? '\"' + oData[this.unitProperty] + '\"' : '_E_U_R';\r\n\r\n\t\t// Applies unit of measurement or a placeholder if unit is empty\r\n\t\ttemplate = template + ' ' + unit;\r\n\t}\r\n\r\n\t// Add formatting for negative values as well\r\n\ttemplate = '* ' + template + ';* - ' + template;\r\n\r\n\treturn { numberFormat: { format: template } };\r\n};\r\n\r\nmodule.exports = Currency;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/binding/type/Currency.js\n// module id = 8\n// module chunks = 0","var XMLNode\t\t = require('../xml/XMLNode'),\r\n\tSharedString\t= require('./SharedString');\r\n\r\n/**\r\n * The SharedStrings class represents the list of shared String\r\n * objects that is used in the Office Open XMl Spreadsheet. The\r\n * SharedStrings object reduces redundancy within the data by\r\n * providing a reference to unique Strings instead of repeating\r\n * them.\r\n *\r\n * Due to the fact that the Strings are shared within the whole\r\n * workbook, each instance of the document export only has one\r\n * single instance of SharedString and therefore it uses the\r\n * Singleton pattern to ensure this.\r\n *\r\n * @class\r\n */\r\nfunction SharedStrings() {\r\n\tif (SharedStrings.instance instanceof SharedStrings) {\r\n\t\treturn SharedStrings.instance;\r\n\t}\r\n\r\n\tXMLNode.call(this, SharedStrings.metadata);\r\n\r\n\tObject.defineProperty(this, 'map', {value: new Map(), writable: false});\r\n\tObject.defineProperty(this, '_shared', {value: new SharedString(''), writable: false});\r\n\r\n\tSharedStrings.instance = this;\r\n}\r\n\r\nSharedStrings.prototype = Object.create(XMLNode.prototype);\r\nSharedStrings.prototype.constructor = SharedStrings;\r\n\r\n/**\r\n * Retrieves the Singleton instance of SharedStrings. If no instance is present, it will create one.\r\n *\r\n * @function\r\n * @returns {object} - Singleton instance\r\n */\r\nSharedStrings.getInstance = function() {\r\n\tif (!SharedStrings.instance) {\r\n\t\tSharedStrings.instance = new SharedStrings();\r\n\t}\r\n\r\n\treturn SharedStrings.instance;\r\n};\r\n\r\nSharedStrings.metadata = {\r\n\ttag: 'sst',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t,{\r\n\t\t\tname: 'count', // Optional as long as uniqueCount is not set\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname : 'uniqueCount', // Optional as long as count is not set\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t\t*/\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds the specified string value to the set of SharedStrings. The\r\n * method creates a SharedString proxy object that contains\r\n * information about the string itself as well as its index. The\r\n * index is zero-based and can be used for referencing within Cell\r\n * objects.\r\n *\r\n * @function insert\r\n * @param {string} sValue - The string that has to be inserted\r\n * @return {object} - The SharedString instance that represents the provided string value\r\n */\r\nSharedStrings.prototype.insert = function(sValue) {\r\n\tvar index;\r\n\r\n\tif (this.map.has(sValue)) {\r\n\t\treturn this.map.get(sValue);\r\n\t}\r\n\r\n\tthis._shared.setValue(sValue);\r\n\tindex = this.map.size;\r\n\tthis.map.set(sValue, index);\r\n\r\n\t/* The SharedString needs to be added to the child nodes as well for serialization purposes */\r\n\tthis.childs.push(this._shared.serialize());\r\n\r\n\treturn index;\r\n};\r\n\r\nmodule.exports = SharedStrings;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/data/SharedStrings.js\n// module id = 9\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The Text class represents textual information without any\r\n * particular formatting. It provides font and sizing details that\r\n * can be used by the Styles class.\r\n *\r\n * @param {Object} [oConfig] - TODO\r\n * @constructor\r\n */\r\nfunction Text(oConfig) {\r\n\tType.call(this);\r\n\r\n\tthis.font = oConfig ? oConfig.font : null;\r\n\tthis.fill = oConfig ? oConfig.fill : null;\r\n\tthis.template = oConfig ? oConfig.template : null;\r\n}\r\n\r\nText.prototype = Object.create(Type.prototype);\r\nText.prototype.constructor = Text;\r\n\r\nText.DEFAULT = {\r\n\tfont: {\r\n\t\tsize: 11,\r\n\t\tname: 'Arial'\r\n\t}\r\n};\r\n\r\nText.prototype._createConfiguration = function() {\r\n\treturn (this.font || this.fill) ? { font: this.font, fill: this.fill } : Text.DEFAULT;\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. If a template is configured, it will automatically fill\r\n * the template with the values from the business object and returns\r\n * the processed string.\r\n *\r\n * @param {string|Array} properties - Name of the property or array of properties that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nText.prototype.getValue = function(properties, oData) {\r\n\tvar match, regex, result, skip, value;\r\n\r\n\tif (!this.template) {\r\n\t\treturn typeof properties === 'string' ? oData[properties] : oData[properties[0]];\r\n\t}\r\n\r\n\t// Obtain if the further processing should be skipped due to missing values for the template\r\n\tskip = properties.every(function(property) {\r\n\t\treturn oData[property] === null\r\n\t\t\t|| typeof oData[property] === 'undefined'\r\n\t\t\t|| (typeof oData[property] === 'string' && oData[property] === '');\r\n\t});\r\n\r\n\tif (skip) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tresult = this.template;\r\n\tregex = /{([0-9]+)}/g;\r\n\r\n\tmatch = regex.exec(result);\r\n\twhile (match !== null) {\r\n\r\n\t\tvalue = oData[properties[match[1]]];\r\n\r\n\t\t// Overwrite empty or undefined values by an empty string\r\n\t\tif (value === null || typeof value === 'undefined') {\r\n\t\t\tvalue = '';\r\n\t\t}\r\n\r\n\t\t// Replaces the matched placeholder by the indexed property value\r\n\t\tresult = result.replace(match[0], value);\r\n\r\n\t\tmatch = regex.exec(result);\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nmodule.exports = Text;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/binding/type/Text.js\n// module id = 10\n// module chunks = 0","/**\r\n * Created by Sebastian Bender on 16.03.2017.\r\n */\r\nvar XMLNode = require('../xml/XMLNode');\r\nvar Cell\t= require('./Cell');\r\n\r\n/**\r\n * The Row is representing a single row according to the Office Open\r\n * XML standard. A Row provides information about its index (line\r\n * number) and can contain several Cell objects.\r\n *\r\n * @class\r\n */\r\nfunction Row() {\r\n\tXMLNode.call(this, Row.metadata);\r\n}\r\n\r\nRow.prototype = Object.create(XMLNode.prototype);\r\nRow.prototype.constructor = Row;\r\n\r\nRow.metadata = {\r\n\ttag: 'row',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'spans',\r\n\t\t\tname: 'spans',\r\n\t\t\tvalue: '1:1'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Calculates the Office Open XML Spreadsheet column reference for a\r\n * numeric value. Referring to the standard, the column is described\r\n * as a alphabetical value consisting of at least one uppercase character.\r\n * This function maps these alphabetical representation to numerical\r\n * zero-based indices.\r\n *\r\n * i.E. the column index 27 (which is the 28th column) results in 'AB'\r\n *\r\n * @param {number} nIndex - Numerical index for the requested column\r\n * @returns {string} - The alphabetical column reference for the given index.\r\n */\r\nRow.getColumnReferenceByIndex = function(nIndex) {\r\n\treturn nIndex < 26 ?\r\n\t\tString.fromCharCode(65 + nIndex) :\r\n\t\tRow.getColumnReferenceByIndex(Math.floor(nIndex / 26) - 1) + String.fromCharCode(65 + (nIndex % 26));\r\n};\r\n\r\n\r\n/**\r\n * Update the 'spans' attribute on this particular {@link Row} for\r\n * optimization purposes. This property optimizes the loading and\r\n * rendering in Microsoft Excel.\r\n *\r\n * @private\r\n */\r\nRow.prototype._updateSpans = function() {\r\n\tthis.spans.value = '1:' + this.childs.length;\r\n};\r\n\r\n/**\r\n * Adds the specified {@link Cell} to the current {@link Row}. If the\r\n * current row already has a reference or style, it will propagate\r\n * this information to the newly added Cell.\r\n *\r\n * @param {object} oCell - Instance of Excel.objects.Cell\r\n */\r\nRow.prototype.addCell = function(oCell) {\r\n\tvar count;\r\n\r\n\tif (!oCell || !(oCell instanceof Cell)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tcount = this.childs.push(oCell);\r\n\tthis._updateSpans();\r\n\r\n\t/* Applies the cell reference if row reference is already present */\r\n\tif (this.reference.value) {\r\n\t\toCell.setReference(Row.getColumnReferenceByIndex(count - 1) + this.reference.value);\r\n\t}\r\n\r\n\tif (this.style) {\r\n\t\toCell.setStyle(this.style.value);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Updates the reference of the current {@link Row}. The Row reference\r\n * represents the line number within the Sheet. It will\r\n * automatically update all assigned Cell references.\r\n *\r\n * @param {string} sReference - Row number within the sheet\r\n */\r\nRow.prototype.setReference = function(sReference) {\r\n\tvar i, reference;\r\n\r\n\treference = typeof sReference == 'number' ? String(sReference) : sReference;\r\n\tif (!reference || !reference.match(/^[1-9]+[0-9]*$/g)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/* Only update if necessary */\r\n\tif (this.reference.value != reference) {\r\n\t\tthis.reference.value = reference;\r\n\t\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\t\tthis.childs[i].setReference(Row.getColumnReferenceByIndex(i) + reference);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given {@link Style} to the current {@link Row}.\r\n *\r\n * @param {(number|string)} nStyle - A number or string representing the Style id\r\n */\r\nRow.prototype.setStyle = function(nStyle) {\r\n\tvar i, style;\r\n\r\n\tif (!this.style) {\r\n\t\tstyle = this.addAttribute({name: 's'});\r\n\t\tObject.defineProperty(this, 'style', {value: style});\r\n\t}\r\n\r\n\tthis.style.value = nStyle;\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tthis.childs[i].setStyle(nStyle);\r\n\t}\r\n};\r\n\r\nmodule.exports = Row;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/data/Row.js\n// module id = 11\n// module chunks = 0","var App\t\t\t\t\t= require('./objects/App'),\r\n\tColumn\t\t\t\t= require('./binding/Column'),\r\n\tColumnConfiguration\t= require('./binding/ColumnConfiguration'),\r\n\tContentTypes\t\t= require('./objects/ContentTypes'),\r\n\tCore\t\t\t\t= require('./objects/Core'),\r\n\tRelationships\t\t= require('./objects/Relationships'),\r\n\tSharedStrings\t\t= require('./data/SharedStrings'),\r\n\tSheet\t\t\t\t= require('./data/Sheet'),\r\n\tStyles\t\t\t\t= require('./style/Styles'),\r\n\tWorkbook\t\t\t= require('./objects/Workbook');\r\n\r\n/**\r\n * The XLSXBuilder class represents an Office Open XML Spreadsheet\r\n * (Microsoft Excel) that can be used to insert structured and\r\n * formatted data and pack a zipped *.xlsx document.\r\n *\r\n * XLSXBuilder requires JSZip 2.x or 3.x to be present.\r\n *\r\n * @param {(Object[]|string[])} aBinding - Binding configuration that is used for {@link Column} definition\r\n * @param {Object} [oContext] - Context object containing metadata for this particular XLSX\r\n * @param {string} [oContext.application] - Application that created this XLSX\r\n * @param {string} [oContext.version] - Application version that was used to create this XLSX\r\n * @param {string} [oContext.title] - Title of the XLSX document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @constructor\r\n */\r\nfunction XLSXBuilder(aBinding, oContext) {\r\n\tif (!(aBinding instanceof Array) || !aBinding.length) {\r\n\t\tthrow new Error('No binding provided');\r\n\t}\r\n\r\n\tthis.styles = new this.objects.Styles();\r\n\tthis.sheet = new this.objects.Sheet(new this.binding.ColumnConfiguration(aBinding, this.styles));\r\n\r\n\tthis.app = new this.objects.App(oContext);\r\n\tthis.core = new this.objects.Core(oContext);\r\n}\r\n\r\nXLSXBuilder.prototype = {\r\n\r\n\tbinding: {\r\n\t\tColumnConfiguration: ColumnConfiguration,\r\n\t\tColumn: Column\r\n\t},\r\n\r\n\tobjects: {\r\n\t\tApp: App,\r\n\t\tContentTypes: ContentTypes,\r\n\t\tCore: Core,\r\n\t\tRelationships: Relationships,\r\n\t\tSharedStrings: SharedStrings,\r\n\t\tSheet: Sheet,\r\n\t\tStyles: Styles,\r\n\t\tWorkbook: Workbook\r\n\t},\r\n\r\n\t/**\r\n\t * Triggers the packaging process for the Office Open XML\r\n\t * SpreadSheet. You need to call the method insert() first,\r\n\t * otherwise the generated Document will contain no data.\r\n\t *\r\n\t * The method returns a promise to allow the library to work\r\n\t * asynchronously.\r\n\t *\r\n\t * @function build\r\n\t * @returns {object} - Packed zip file as Blob or Nodebuffer, depending on the runtime environment\r\n\t */\r\n\tbuild: function() {\r\n\t\tvar files, zip, i, j, fileConfig, FileType, xmlObject, relation, zipConfig, promise;\r\n\r\n\t\tfiles = [\r\n\t\t\t{\r\n\t\t\t\tname: '[Content_Types].xml',\r\n\t\t\t\tpath: '',\r\n\t\t\t\ttype: this.objects.ContentTypes\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '.rels',\r\n\t\t\t\tpath: '_rels/',\r\n\t\t\t\ttype: this.objects.Relationships,\r\n\t\t\t\trelationships: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'xl/workbook.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/app.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/core.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'workbook.xml',\r\n\t\t\t\tpath: 'xl/',\r\n\t\t\t\ttype: this.objects.Workbook\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'workbook.xml.rels',\r\n\t\t\t\tpath: 'xl/_rels/',\r\n\t\t\t\ttype: this.objects.Relationships,\r\n\t\t\t\trelationships: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'worksheets/sheet1.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'sharedStrings.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'styles.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t];\r\n\t\tzip = new JSZip();\r\n\r\n\t\tfor (i = 0; i < files.length; i++) {\r\n\t\t\tfileConfig = files[i];\r\n\t\t\tFileType = fileConfig.type;\r\n\t\t\txmlObject = new FileType(fileConfig);\r\n\r\n\t\t\tif (xmlObject instanceof this.objects.Relationships) {\r\n\t\t\t\tfor (j = 0; j < fileConfig.relationships.length; j++) {\r\n\t\t\t\t\trelation = fileConfig.relationships[j];\r\n\t\t\t\t\txmlObject.addRelationship(relation.target, relation.type);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tzip.file(fileConfig.path + fileConfig.name, xmlObject.serialize());\r\n\t\t}\r\n\r\n\t\t// Add document metadata\r\n\t\tzip.file('docProps/app.xml', this.app.serialize());\r\n\t\tzip.file('docProps/core.xml', this.core.serialize());\r\n\r\n\t\t// Add central styles\r\n\t\tzip.file('xl/styles.xml', this.styles.serialize());\r\n\r\n\t\t// Add current sheet\r\n\t\tzip.file('xl/worksheets/sheet1.xml', this.sheet.serialize());\r\n\r\n\t\t// Add Shared Strings Singleton\r\n\t\tzip.file('xl/sharedStrings.xml', this.objects.SharedStrings.getInstance().serialize());\r\n\r\n\t\tzipConfig = {\r\n\t\t\tcompression: 'DEFLATE',\r\n\t\t\ttype: JSZip.support.nodebuffer ? 'nodebuffer' : 'arraybuffer'\r\n\t\t};\r\n\r\n\t\tif (zip.generateAsync) {\r\n\t\t\tpromise = zip.generateAsync(zipConfig);\r\n\t\t} else { // Zip.generate from JSZip 2.x\r\n\t\t\tpromise = new Promise(function(resolve, reject) {\r\n\t\t\t\tvar zipped = zip.generate(zipConfig);\r\n\r\n\t\t\t\tresolve(zipped);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn promise;\r\n\t},\r\n\r\n\t/**\r\n\t * Insert the specified set of data to the Open Document Spreadsheet.\r\n\t * All data will be bound according to the {@link ColumnConfiguration}.\r\n\t *\r\n\t * @function append\r\n\t * @param {(Object[]|Object)} aData - Array of data that gets appended to the Spreadsheet\r\n\t */\r\n\tappend: function(aData) {\r\n\t\tvar array;\r\n\r\n\t\t/* We need to check if param is null or undefined because [null].length results in 1 */\r\n\t\tif (typeof aData === 'undefined' || aData === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tarray = aData instanceof Array ? aData : [aData];\r\n\r\n\t\twhile (array.length) {\r\n\t\t\tthis.sheet.insert(array.shift());\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = XLSXBuilder;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/XLSXBuilder.js\n// module id = 12\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This class represents the app.xml within the generated Excel. The\r\n * App contains information about the application that created the\r\n * Office Open XML Spreadsheet.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.application] - Application that created this Excel\r\n * @param {string} [oContext.version] - Application version that was used to create this Excel\r\n * @constructor\r\n */\r\nfunction App(oContext) {\r\n\tXMLNode.call(this, App.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.application) {\r\n\t\t\tthis.application.value = oContext.application;\r\n\t\t}\r\n\r\n\t\tif (oContext.version) {\r\n\t\t\tthis.version.value = oContext.version;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nApp.prototype = Object.create(XMLNode.prototype);\r\nApp.prototype.constructor = App;\r\n\r\nApp.metadata = {\r\n\ttag: 'Properties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'vt',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'application',\r\n\t\t\ttag: 'Application',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'DocSecurity',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Company',\r\n\t\t\tvalue: 'SAP SE'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'SharedDoc',\r\n\t\t\tvalue: 'false'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'version',\r\n\t\t\ttag: 'AppVersion',\r\n\t\t\tvalue: '1.52' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = App;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/objects/App.js\n// module id = 13\n// module chunks = 0","var XMLElement = require('./XMLElement');\r\n\r\n/**\r\n * The class XMLAttribute is a wrapper for representing XML-like attributes attributes.\r\n * It is mainly used for defining namespaces and namespace-related attributes.\r\n *\r\n * @param {object} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.name - String representation of the XML tag.\r\n * @param {string} [oConfig.prefix] - Prefix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.suffix] - Suffix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.value] - Textual value of the {@link XMLAttribute}.\r\n * @class\r\n * @module xml/XMLAttribute\r\n */\r\nfunction XMLAttribute(oConfig) {\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\tthis.name = oConfig.name ? oConfig.name : '';\r\n\tthis.prefix = oConfig.prefix ? oConfig.prefix : '';\r\n\tthis.suffix = oConfig.suffix ? oConfig.suffix : '';\r\n}\r\n\r\nXMLAttribute.prototype = Object.create(XMLElement.prototype);\r\nXMLAttribute.prototype.constructor = XMLAttribute;\r\n\r\n/**\r\n * Performes a String serialization of the XMLAttribute. The representation is formatted as follows:\r\n * <prefix>:<name>:<suffix>=\"<value>\"\r\n *\r\n * i.E. ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'\r\n * for { name: 'xmlns', suffix: 'xsi', value: 'http://www.w3.org/2001/XMLSchema-instance' }\r\n *\r\n * Note that the serialized String always comes with a leading whitespace to allow easy concatenation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLAttribute\r\n */\r\nXMLAttribute.prototype.serialize = function(){\r\n\treturn ' ' + (this.prefix ? this.prefix + ':' : '') + this.name\r\n\t\t+ (this.suffix ? ':' + this.suffix : '') + '=\"' + this.xmlEncode(this.value) + '\"';\r\n};\r\n\r\nmodule.exports = XMLAttribute;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/xml/XMLAttribute.js\n// module id = 14\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The SharedString class represents each shared String within the\r\n * SharedStrings file.\r\n *\r\n * @param {string} sValue - The String that gets represented by this SharedString object\r\n * @class\r\n */\r\nfunction SharedString(sValue) {\r\n\tXMLNode.call(this, SharedString.metadata);\r\n\r\n\tthis.setValue(sValue);\r\n}\r\n\r\nSharedString.prototype = Object.create(XMLNode.prototype);\r\nSharedString.prototype.constructor = SharedString;\r\n\r\n\r\nSharedString.metadata = {\r\n\ttag: 'si',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 't'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Assigns the given value to the current SharedString instance.\r\n *\r\n * @function\r\n * @param {string} sValue - The string value that should be added\r\n */\r\nSharedString.prototype.setValue = function(sValue) {\r\n\r\n\tif (sValue && typeof sValue == 'string') {\r\n\t\tthis.text.value = sValue;\r\n\t} else {\r\n\r\n\t\t/**\r\n\t\t * There are other implementations for creating a string\r\n\t\t * representation out of a number that might be more\r\n\t\t * convenient like new String(number).toString() or\r\n\t\t * number.toString() but '' + number is the best performing.\r\n\t\t */\r\n\t\tthis.text.value = '' + sValue;\r\n\t}\r\n};\r\n\r\nmodule.exports = SharedString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/data/SharedString.js\n// module id = 15\n// module chunks = 0","var Column\t= require('./Column'),\r\n\tText\t= require('./type/Text'),\r\n\tRow\t\t= require('../data/Row'),\r\n\tCell\t= require('../data/Cell');\r\n\r\n/**\r\n * ColumnConfiguration represents the configuration of all columns within\r\n * one Sheet. The ColumnConfiguration handles the mapping of object\r\n * properties to certain columns,, labeling, type definition and also\r\n * display information like width and alignment.\r\n *\r\n * @param {Array} aColumnConfig -  An array of Column definitions. {@see Column} for further details\r\n * @param {Styles} oStyles - Style collection that is used to register Cell or row specific styles\r\n * @module binding/ColumnBinding\r\n * @constructor\r\n */\r\nfunction ColumnConfiguration(aColumnConfig, oStyles) {\r\n\tvar column, i;\r\n\r\n\tthis.columns = [];\r\n\tthis.row = null;\r\n\tthis.styles = oStyles;\r\n\r\n\tfor (i = 0; i < aColumnConfig.length; i++) {\r\n\t\tcolumn = aColumnConfig[i] instanceof Column ? aColumnConfig[i] : new Column(aColumnConfig[i], this.styles);\r\n\t\tthis.columns.push(column);\r\n\t}\r\n}\r\n\r\n/**\r\n * Initializes the objects that are necessary for the binding. This\r\n * components are:\r\n * - a template Row\r\n * - a Cell for each Column\r\n * - a Style for each data type referenced by each Column\r\n *\r\n * @private\r\n */\r\nColumnConfiguration.prototype._initBinding = function() {\r\n\tvar i;\r\n\r\n\tthis.row = new Row();\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis.row.addCell(this.columns[i].getCell());\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Creates an new Row and binds the provided data to the Row Cells according to the current ColumnConfiguration.\r\n *\r\n * @param {Object} oData - The data object that has to be bound to the row\r\n * @returns {Row} - Returns the created Row that contains the provided data\r\n */\r\nColumnConfiguration.prototype.bind = function(oData) {\r\n\tvar i;\r\n\r\n\tif (this.row === null) {\r\n\t\tthis._initBinding();\r\n\t}\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis.columns[i].bind(oData);\r\n\t}\r\n\r\n\treturn this.row;\r\n};\r\n\r\n\r\n/**\r\n * Creates the header Row according to the current ColumnConfiguration and returns it.\r\n *\r\n * @returns {Row} - Header row according to the ColumnConfiguration\r\n */\r\nColumnConfiguration.prototype.getHeader = function() {\r\n\tvar cell, row, type;\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F7F7F7'\r\n\t\t}\r\n\t});\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId());\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\tthis.columns.forEach(function(column, index, array) {\r\n\r\n\t\t/* Create new Cell and assign value */\r\n\t\tcell = new Cell(type);\r\n\t\tcell.setValue('label', column);\r\n\r\n\t\trow.addCell(cell);\r\n\t});\r\n\r\n\treturn row;\r\n};\r\n\r\n\r\n/**\r\n * Returns the size of the ColumnConfiguration - respectively the\r\n * count of the configured columns.\r\n *\r\n * @returns {number} Count of configured columns\r\n */\r\nColumnConfiguration.prototype.size = function() {\r\n\treturn this.columns.length;\r\n};\r\n\r\nmodule.exports = ColumnConfiguration;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/binding/ColumnConfiguration.js\n// module id = 16\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This class represents the [Content_Types].xml within the generated Excel.\r\n *\r\n * @constructor\r\n */\r\nfunction ContentTypes() {\r\n\tXMLNode.call(this, ContentTypes.metadata);\r\n}\r\n\r\nContentTypes.prototype = Object.create(XMLNode.prototype);\r\nContentTypes.prototype.constructor = ContentTypes;\r\n\r\n\r\nContentTypes.metadata = {\r\n\ttag: 'Types',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/content-types'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'rels'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.relationships+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/workbook.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/worksheets/sheet1.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/styles.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/sharedStrings.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/core.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.core-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/app.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = ContentTypes;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/objects/ContentTypes.js\n// module id = 17\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This class represents the core.xml within the generated Excel. The\r\n * Core contains basic information about the content and the owner of\r\n * the file.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.title] - Title of the Excel document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @constructor\r\n */\r\nfunction Core(oContext) {\r\n\tXMLNode.call(this, Core.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.title) {\r\n\t\t\tthis.title.value = oContext.title;\r\n\t\t}\r\n\r\n\t\tif (oContext.modifiedBy) {\r\n\t\t\tthis.modifiedBy.value = oContext.modifiedBy;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nCore.prototype = Object.create(XMLNode.prototype);\r\nCore.prototype.constructor = Core;\r\n\r\nCore.metadata = {\r\n\ttag: 'cp:coreProperties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'cp',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dc',\r\n\t\t\tvalue: 'http://purl.org/dc/elements/1.1/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcterms',\r\n\t\t\tvalue: 'http://purl.org/dc/terms/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcmitype',\r\n\t\t\tvalue: 'http://purl.org/dc/dcmitype/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'xsi',\r\n\t\t\tvalue: 'http://www.w3.org/2001/XMLSchema-instance'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'title',\r\n\t\t\ttag: 'dc:title',\r\n\t\t\tvalue: 'Table Export' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dc:creator',\r\n\t\t\tvalue: 'SAP UI5 Document Export'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dcterms:created',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprefix: 'xsi',\r\n\t\t\t\t\tname: 'type',\r\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: new Date().toISOString()\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cp:keywords',\r\n\t\t\tvalue: 'SAP UI5 EXPORT'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'modifiedBy',\r\n\t\t\ttag: 'cp:lastModifiedBy',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = Core;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/objects/Core.js\n// module id = 18\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n *\r\n * @constructor\r\n */\r\nfunction Relationships() {\r\n\tXMLNode.call(this, Relationships.metadata);\r\n}\r\n\r\nRelationships.prototype = Object.create(XMLNode.prototype);\r\nRelationships.prototype.constructor = Relationships;\r\n\r\nRelationships.metadata = {\r\n\ttag: 'Relationships',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: []\r\n};\r\n\r\n/**\r\n * Creates a new Relationship entry for the current collection.\r\n * The Relationship references are defined by the ISO/IEC 29500-1:2016 standard.\r\n *\r\n * @param {string} sTarget - Target file within the generated Excel\r\n * @param {string} sType - XMLNS reference of the targets file type\r\n */\r\nRelationships.prototype.addRelationship = function(sTarget, sType) {\r\n\tvar id = 'rId' + (this.childs.length + 1);\r\n\r\n\tthis.childs.push(new XMLNode({\r\n\t\ttag: 'Relationship',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Id',\r\n\t\t\t\tvalue: id\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Type',\r\n\t\t\t\tvalue: sType\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Target',\r\n\t\t\t\tvalue: sTarget\r\n\t\t\t}\r\n\t\t]\r\n\t}));\r\n};\r\n\r\nmodule.exports = Relationships;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/objects/Relationships.js\n// module id = 19\n// module chunks = 0","var XMLNode\t\t = require('../xml/XMLNode'),\r\n\tRow\t\t\t = require('./Row');\r\n\r\n/**\r\n * This class represents a Sheet within an Office Open XML Spreadsheet.\r\n * @param {Object} oColumnConfiguration - ColumnConfiguration object that provides information about the columns\r\n * @constructor\r\n */\r\nfunction Sheet(oColumnConfiguration) {\r\n\tXMLNode.call(this, Sheet.metadata);\r\n\r\n\tObject.defineProperty(this, '_columns', {value: oColumnConfiguration, writable: false});\r\n\r\n\tthis._createCols();\r\n\tthis._createHeader();\r\n}\r\n\r\nSheet.prototype = Object.create(XMLNode.prototype);\r\nSheet.prototype.constructor = Sheet;\r\n\r\nSheet.metadata = {\r\n\ttag: 'worksheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'dimension',\r\n\t\t\ttag: 'dimension',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'sheetViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'sheetView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'workbookViewId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'tabSelected',\r\n\t\t\t\t\t\t\tvalue: '1' // Refers to W3C XML Schema boolean (true)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tproperties: [\r\n\r\n\t\t\t\t\t\t/* Freezes the header row */\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttag: 'pane',\r\n\t\t\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'ySplit',\r\n\t\t\t\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'topLeftCell',\r\n\t\t\t\t\t\t\t\t\tvalue: 'A2'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'activePane',\r\n\t\t\t\t\t\t\t\t\tvalue: 'bottomLeft'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'state',\r\n\t\t\t\t\t\t\t\t\tvalue: 'frozen'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'sheetFormatPr',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultRowHeight',\r\n\t\t\t\t\tvalue: '15'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'columns',\r\n\t\t\ttag: 'cols'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'data',\r\n\t\t\ttag: 'sheetData'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'filter',\r\n\t\t\ttag: 'autoFilter',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'pageMargins',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'left',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'right',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'top',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bottom',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'header',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'footer',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nSheet.MAX_ROWS = 1048576;\r\n\r\n/**\r\n * Creates the column specific information within the worksheet.\r\n * Column specific information is i.E. the width or the use of the\r\n * bestFit functionality.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createCols = function() {\r\n\tvar col, i, minWidth, width,\r\n\t\tautoFitButtonOffset = 2.4;\r\n\r\n\tfor (i = 0; i < this._columns.size(); i++) {\r\n\t\tcol = this._columns.columns[i];\r\n\t\tminWidth = this._calculateColumnWidth(col.label.length) + autoFitButtonOffset;\r\n\t\twidth = Math.max(this._calculateColumnWidth(col.width), minWidth);\r\n\r\n\t\tthis.columns.addChild({\r\n\t\t\ttag: 'col',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'min',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'max',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bestFit',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'width',\r\n\t\t\t\t\tvalue: Math.max(width, minWidth)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'customWidth',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * This method calculates the optimal column width for the given\r\n * amount of characters. It removes the dependency on font size or\r\n * pixel width.\r\n *\r\n * @param {number} nCharacters - Amount of characters that should fit into the column\r\n * @return {number} Excel internal width value corresponding to the used font size\r\n * @private\r\n */\r\nSheet.prototype._calculateColumnWidth = function(nCharacters) {\r\n\tvar defaultFontSize = 11, // Needs to be adjusted once we support different font sizes\r\n\t\tdefaultPaddingAndBorder = 5,\r\n\t\tscaleFactor = 7.33;\r\n\r\n\tif (typeof nCharacters !== 'number') {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\treturn (((nCharacters * 2 / 3) * defaultFontSize) + defaultPaddingAndBorder) / scaleFactor;\r\n};\r\n\r\n/**\r\n * Requests the header Row from the ColumnConfiguration and adds it to the\r\n * sheet.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createHeader = function() {\r\n\r\n\tthis._appendRow(this._columns.getHeader());\r\n};\r\n\r\n/**\r\n * Adds the specified Row to the sheetData element of this Sheet and\r\n * automatically propagates its row index to the row and its cells.\r\n *\r\n * @param {Object} oRow - The Row object that should be appended to the current Sheet\r\n * @private\r\n */\r\nSheet.prototype._appendRow = function(oRow) {\r\n\tvar i, dimension;\r\n\r\n\toRow.setReference('' + (this.data.childs.length + 1));\r\n\r\n\tthis.data.childs.push(oRow.serialize());\r\n\r\n\t/* Update sheet dimension */\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tif (this.childs[i].tag == 'dimension') {\r\n\t\t\tdimension = 'A1:' + Row.getColumnReferenceByIndex(this._columns.size() - 1) + this.data.childs.length;\r\n\r\n\t\t\tthis.dimension.reference.value = dimension;\r\n\t\t\tthis.filter.reference.value = dimension;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Requests a row from the ColumnConfiguration containing the given data\r\n * and adds it to the sheetData element of this Sheet.\r\n *\r\n * The maximum row limit is 1,048,576 but we do not enforce this\r\n * limit because the user rather runs out of memory than reaching\r\n * this limit.\r\n *\r\n * @function insert\r\n * @param {Object} oData - Data object to be inserted\r\n */\r\nSheet.prototype.insert = function(oData) {\r\n\tif (this.data.childs.length == Sheet.MAX_ROWS) {\r\n\t\tthrow new Error('Row limit reached.');\r\n\t}\r\n\r\n\t/* Create row and apply binding */\r\n\tthis._appendRow(this._columns.bind(oData));\r\n};\r\n\r\nmodule.exports = Sheet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/data/Sheet.js\n// module id = 20\n// module chunks = 0","var XMLNode\t\t\t= require('../xml/XMLNode'),\r\n\tStyle\t\t\t= require('./Style'),\r\n\tFont\t\t\t= require('./Font'),\r\n\tFill\t\t\t= require('./Fill'),\r\n\tBorder\t\t\t= require('./Border'),\r\n\tNumberFormat\t= require('./NumberFormat');\r\n\r\n/**\r\n *\r\n * @class\r\n * @module style/Styles\r\n */\r\nfunction Styles() {\r\n\tXMLNode.call(this, Styles.metadata);\r\n\r\n\t/* Microsoft Excel fix - specific fill that needs to be present */\r\n\tthis.addFill({ type: 'none' }); // Add a default fill at index 0\r\n\tthis.addFill({ type: 'gray125' }); // Needs to have index 1\r\n\tthis.addStyle(Style.DEFAULT); // Apply base style to feed the hard-coded cellStyles and cellStyleXfs\r\n}\r\n\r\nStyles.prototype = Object.create(XMLNode.prototype);\r\nStyles.prototype.constructor = Styles;\r\n\r\nStyles.metadata = {\r\n\ttag: 'styleSheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'numberFormats',\r\n\t\t\ttag: 'numFmts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fonts',\r\n\t\t\ttag: 'fonts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fills',\r\n\t\t\ttag: 'fills',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'borders',\r\n\t\t\ttag: 'borders',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyleXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'xf',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'numFmtId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fontId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fillId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'borderId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'cellXfs',\r\n\t\t\ttag: 'cellXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'cellStyle',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\t\tvalue: 'Normal'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xfId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'builtinId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dxfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'tableStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '0'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultTableStyle',\r\n\t\t\t\t\tvalue: 'TableStyleMedium2'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultPivotStyle',\r\n\t\t\t\t\tvalue: 'PivotStyleLight16'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n\r\n/**\r\n * Adds the specified Style to the Styles class according to the\r\n * Style configuration. The method will return a Style object that\r\n * references Font, Fill, Border and an optional NumberFormat. If\r\n * some of the referenced Font, Fill, Border or NumberFormat objects\r\n * are not present yet, it will create them automatically, otherwise\r\n * it will re-use existing ones.\r\n *\r\n * The method ensures that particular Style combinations exist only\r\n * once and there are no duplicates.\r\n *\r\n * @param {Object} oData - Configuration object that defines the Style information\r\n * @param {Object} [oData.font] - Configuration object that defines the Font information\r\n * @param {string} [oData.font.name] - Name of the used Font i.E. 'Arial'\r\n * @param {string} [oData.font.size] - Preferred Font size i.E. '12'\r\n * @param {boolean} [oData.font.bold] - Defines the Font weight\r\n * @param {Object} [oData.fill] - Configuration object that defines the Fill information\r\n * @param {string} [oData.fill.color] - HEX string defining the color of the cell fill\r\n * @param {string} [oData.fill.type] - Defines the type of the fill i.E. 'none' or 'solid'\r\n * @param {Object} [oData.border] - Configuration object that defines the Border information\r\n * @param {Object|number} [oData.numberFormat] - Configuration object that defines the NumberFormat information\r\n * @param {string} [oData.numberFormat.format] - Formatting template that will be used\r\n * @param {string} [oData.align] - Defines the text alignment within the cell\r\n * @returns {number} - The ID of the unique Style object that needs to be referenced\r\n */\r\nStyles.prototype.addStyle = function(oData) {\r\n\tvar style, fontId, fillId, borderId, numberFormatId;\r\n\r\n\t/* Add Font, Fill, Border and NumberFormat if needed */\r\n\tfontId = this.addFont(oData.font);\r\n\tfillId = this.addFill(oData.fill);\r\n\tborderId = this.addBorder(oData.border);\r\n\r\n\t/* Fallback to avoid custom NumberFormats that won't be used if oData.numberFormat is undefined */\r\n\tif (typeof oData.numberFormat === 'undefined') {\r\n\t\toData.numberFormat = 0;\r\n\t}\r\n\r\n\tnumberFormatId =\r\n\t\tNumberFormat._isBuiltin(oData.numberFormat) ? oData.numberFormat : this.addNumberFormat(oData.numberFormat);\r\n\r\n\t/* Create temporary Style */\r\n\tstyle = new Style();\r\n\r\n\tstyle.setFontId(fontId);\r\n\tstyle.setFillId(fillId);\r\n\tstyle.getBorderId(borderId);\r\n\tstyle.setNumberFormatId(numberFormatId);\r\n\r\n\t/* Add Style if not already present */\r\n\treturn this._addToAggregation(style, this.cellXfs);\r\n};\r\n\r\n\r\n/**\r\n * Adds the specific item to the provided aggregation. This Method\r\n * should only be called by the library itself due to possible\r\n * failures. It automatically updates the count within the XML\r\n * representation of this aggregation.\r\n *\r\n * This method should only be used for Font, Fill, Border or\r\n * NumberFormat objects.\r\n *\r\n * @param {Font|Fill|Border|NumberFormat|Style} oNewItem - The item that needs to be appended to the aggregation\r\n * @param {Array} aAggregation - An array that represents the aggregation\r\n * @returns {number} - The zero-based index of the element after it was inserted\r\n * @private\r\n */\r\nStyles.prototype._addToAggregation = function(oNewItem, aAggregation) {\r\n\tvar count, i;\r\n\r\n\ti = -1;\r\n\r\n\taAggregation.childs.forEach(function(existingItem, index, array) {\r\n\t\tif (existingItem.equals(oNewItem)) {\r\n\t\t\ti = index;\r\n\t\t}\r\n\t});\r\n\r\n\tif (i === -1) {\r\n\t\taAggregation.addChild(oNewItem);\r\n\t\tcount = aAggregation.childs.length;\r\n\r\n\t\taAggregation.count.value = count;\r\n\t\ti = count - 1;\r\n\t}\r\n\r\n\treturn i;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a RGB color to the Styles collection that is\r\n * referenced by several Styles.\r\n *\r\n * If this particular color is already present, it will not add it a\r\n * second time.\r\n *\r\n * @param {string} sHexColor - HEX string representing a RGB color\r\n */\r\nStyles.prototype.addColor = function(sHexColor) {\r\n\tif (!this.colors) {\r\n\t\tthis.addChild({\r\n\t\t\tid: 'colors',\r\n\t\t\ttag: 'colors',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'mru',\r\n\t\t\t\t\ttag: 'mruColors'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\t// TODO Check if color is already present\r\n\r\n\tthis.colors.mru.addChild({\r\n\t\ttag: 'color',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'rgb',\r\n\t\t\t\tvalue: 'FF' + sHexColor\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Font to the Styles collection that can be\r\n * referenced by several Styles. The Font is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Font is already present, it will not add it a\r\n * second time. This ensures that each referenced Font is unique\r\n * according to the criteria of Font#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Font.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @returns {number} - The index of this Font used for reference by Style objects\r\n */\r\nStyles.prototype.addFont = function(oData) {\r\n\tvar oFont = new Font(oData);\r\n\r\n\treturn this._addToAggregation(oFont, this.fonts);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Fill to the Styles collection that can be\r\n * referenced by several Styles. The Fill is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Fill is already present, it will not add it a\r\n * second time. This ensures that each referenced Fill is unique\r\n * according to the criteria of Fill#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Fill.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @returns {number} - The index of this Fill used for reference by Style objects\r\n */\r\nStyles.prototype.addFill = function(oData) {\r\n\tvar index, oFill;\r\n\r\n\toFill = new Fill(oData);\r\n\r\n\tindex = this._addToAggregation(oFill, this.fills);\r\n\r\n\tif (oFill.getFill() !== null) {\r\n\t\tthis.addColor(oFill.getFill());\r\n\t}\r\n\r\n\treturn index;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Border to the Styles collection that can be\r\n * referenced by several Styles. The Border is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Border is already present, it will not add it a\r\n * second time. This ensures that each referenced Border is unique\r\n * according to the criteria of Border#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Border.\r\n *\r\n * @param {Object} oData - Configuration object for this Border\r\n * @returns {number} - The index of this Border used for reference by Style objects\r\n */\r\nStyles.prototype.addBorder = function(oData) {\r\n\tvar oBorder = new Border(oData);\r\n\r\n\treturn this._addToAggregation(oBorder, this.borders);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a NumberFormat to the Styles collection that can\r\n * be referenced by several Styles. The NumberFormat is instantiated\r\n * according to the provided configuration object.\r\n *\r\n * If this particular NumberFormat is already present, it will not\r\n * add it a second time. This ensures that each referenced\r\n * NumberFormat is unique according to the criteria of\r\n * NumberFormat#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * NumberFormat.\r\n *\r\n * @param {Object} oData - Configuration object for this NumberFormat\r\n * @returns {number} - The index of this NumberFormat used for reference by Style objects\r\n */\r\nStyles.prototype.addNumberFormat = function(oData) {\r\n\tvar index, numberFormat;\r\n\r\n\tnumberFormat = new NumberFormat(oData);\r\n\tindex = this._addToAggregation(numberFormat, this.numberFormats);\r\n\r\n\tnumberFormat.setId(NumberFormat.ID_OFFSET + index);\r\n\r\n\treturn numberFormat.getId();\r\n};\r\n\r\nmodule.exports = Styles;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/style/Styles.js\n// module id = 21\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\nvar Alignment = require('./Alignment');\r\n\r\n/**\r\n * Represents a particular Style within the Office Open XML Spreadsheet.\r\n * Instances of this type will be created by the Styles Class after\r\n * registering a new Style.\r\n *\r\n * @constructor\r\n */\r\nfunction Style() {\r\n\tXMLNode.call(this, Style.metadata);\r\n}\r\n\r\nStyle.prototype = Object.create(XMLNode.prototype);\r\nStyle.prototype.constructor = Style;\r\n\r\nStyle.metadata = {\r\n\ttag: 'xf',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'numberFormat',\r\n\t\t\tname: 'numFmtId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'font',\r\n\t\t\tname: 'fontId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\tname: 'fillId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'border',\r\n\t\t\tname: 'borderId',\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nStyle.DEFAULT = {\r\n\tfont: {\r\n\t\tname: 'Arial',\r\n\t\tsize: 11,\r\n\t\tfamily: '2',\r\n\t\tcolor: '1',\r\n\t\tbold: false\r\n\t},\r\n\tfill: {\r\n\t\ttype: 'none'\r\n\t}\r\n};\r\n\r\nStyle.prototype.getAlignment = function() {\r\n\tvar alignProperty = 'alignment';\r\n\r\n\treturn alignProperty in this ? this[alignProperty][alignProperty].value : null;\r\n};\r\n\r\nStyle.prototype.getFontId = function() {\r\n\treturn this.font.value;\r\n};\r\n\r\nStyle.prototype.getFillId = function() {\r\n\treturn this.fill.value;\r\n};\r\n\r\nStyle.prototype.getBorderId = function() {\r\n\treturn this.border.value;\r\n};\r\n\r\nStyle.prototype.getNumberFormatId = function() {\r\n\treturn this.numberFormat.value;\r\n};\r\n\r\n/**\r\n * Applies the alignment to the Style. The alignment must match the\r\n * predefined options of <code>Alignment</code> as far as it is not\r\n * null. Other values will be ignored.\r\n *\r\n * The value <code>null</code> will delete the current alignment.\r\n *\r\n * @param {string|null} sAlign - Alignment that gets applied or null\r\n */\r\nStyle.prototype.setAlignment = function(sAlign) {\r\n\tvar alignProperty = 'alignment';\r\n\r\n\tthis._apply(sAlign, 'Alignment');\r\n\r\n\tif (sAlign === null) {\r\n\t\tthis.remove(alignProperty);\r\n\t}\r\n\r\n\tif (!Alignment.horizontal.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!(alignProperty in this)) {\r\n\t\tthis.addChild({\r\n\t\t\tid: alignProperty,\r\n\t\t\ttag: 'alignment', // This tag is fix, so we can't use the alignProperty variable in this case\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: alignProperty,\r\n\t\t\t\t\tname: 'horizontal'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\t/* The property variable is used on the child node as well */\r\n\tthis[alignProperty][alignProperty].value = sAlign;\r\n};\r\n\r\nStyle.prototype.setFontId = function(nFontId) {\r\n\tthis._apply(nFontId, 'Font');\r\n\r\n\tthis.font.value = nFontId;\r\n};\r\n\r\nStyle.prototype.setFillId = function(nFillId) {\r\n\tthis._apply(nFillId, 'Fill');\r\n\r\n\tthis.fill.value = nFillId;\r\n};\r\n\r\nStyle.prototype.setBorderId = function(sBorderId) {\r\n\tthis.border.value = sBorderId;\r\n};\r\n\r\nStyle.prototype.setNumberFormatId = function(nNumFmtId) {\r\n\tthis._apply(nNumFmtId, 'NumberFormat');\r\n\r\n\tthis.numberFormat.value = nNumFmtId;\r\n};\r\n\r\nStyle.prototype._apply = function(nId, sType) {\r\n\tvar applyProperty = 'apply' + sType;\r\n\r\n\tthis.remove(applyProperty);\r\n\r\n\tif (nId) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: applyProperty,\r\n\t\t\tname: applyProperty,\r\n\t\t\tvalue: '1'\r\n\t\t});\r\n\t}\r\n};\r\n\r\n\r\nStyle.prototype.equals = function(oStyle) {\r\n\tif (!(oStyle instanceof Style)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFontId() === oStyle.getFontId()\r\n\t\t&& this.getFillId() === oStyle.getFillId()\r\n\t\t&& this.getBorderId() === oStyle.getBorderId()\r\n\t\t&& this.getNumberFormatId() === oStyle.getNumberFormatId();\r\n};\r\n\r\nmodule.exports = Style;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/style/Style.js\n// module id = 22\n// module chunks = 0","var Alignment = {\r\n\thorizontal: {\r\n\t\tLeft: 'left',\r\n\t\tCenter: 'center',\r\n\t\tRight: 'right',\r\n\t\tcontains: function(sAlign) {\r\n\r\n\t\t\treturn _contains(sAlign, Alignment.horizontal);\r\n\t\t}\r\n\t},\r\n\tvertical: {\r\n\t\tTop: 'top',\r\n\t\tMiddle: 'middle',\r\n\t\tBottom: 'bottom',\r\n\t\tcontains: function(sAlign) {\r\n\r\n\t\t\treturn _contains(sAlign, Alignment.vertical);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Checks whether the requested alignment is contained or not. An\r\n * alignment that is contained can be assigned within styles. Other\r\n * alignments that are not contained are not supported and thus not\r\n * assignable. It differentiates between horizontal and vertical\r\n * alignments, depending on the aggregation that was provided.\r\n *\r\n * @param {string} sAlign - The alignment that should be checked\r\n * @param {Array} oAggregation - The aggregation the alignment might be in\r\n * @returns {boolean} - Returns true if the alignment is supported\r\n * @private\r\n */\r\nfunction _contains(sAlign, oAggregation) {\r\n\tvar key, contained = false;\r\n\r\n\tfor (key in oAggregation) {\r\n\t\tcontained = contained ? contained : oAggregation[key] === sAlign && typeof oAggregation[key] !== 'function';\r\n\t}\r\n\r\n\treturn contained;\r\n}\r\n\r\nmodule.exports = Alignment;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/style/Alignment.js\n// module id = 23\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The Font class represents a Font configuration within an Office\r\n * Open XML Spreadsheet.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @param {boolean} [oData.bold] - Boolean value indicating if the Font should be bold\r\n * @param {string} [oData.name] - The name of the font that gets used by this Font object i.E. Arial, Verdana, etc.\r\n * @param {number|String} [oData.size] - The font size that is been used\r\n * @param {number} [oData.family] - The font family reference {@see getFamily}\r\n * @constructor\r\n */\r\nfunction Font(oData) {\r\n\tXMLNode.call(this, Font.metadata);\r\n\r\n\tif (oData && oData instanceof Object) {\r\n\t\tthis.setName(oData.name)\r\n\t\t\t.setSize(oData.size)\r\n\t\t\t.setFamily(oData.family)\r\n\t\t\t.setBold(!!oData.bold);\r\n\t}\r\n}\r\n\r\nFont.prototype = Object.create(XMLNode.prototype);\r\nFont.prototype.constructor = Font;\r\n\r\nFont.DEFAULT_SIZE = 11;\r\nFont.DEFAULT_NAME = 'Arial';\r\n\r\nFont.metadata = {\r\n\ttag: 'font',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'size',\r\n\t\t\ttag: 'sz',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_SIZE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'color',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'theme',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'name',\r\n\t\t\ttag: 'name',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_NAME\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'family',\r\n\t\t\ttag: 'family',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: 2\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Font is equal to the given parameter.\r\n *\r\n * @param {Font} oFont - The Font to compare with\r\n * @return {boolean} - Returns true if both Font objects contain the same configuration.\r\n */\r\nFont.prototype.equals = function(oFont) {\r\n\tif (!(oFont instanceof Font)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getName() == oFont.getName()\r\n\t\t&& this.getSize() == oFont.getSize()\r\n\t\t&& this.isBold() == oFont.isBold()\r\n\t\t&& this.getColor() == oFont.getColor()\r\n\t\t&& this.getFamily() == oFont.getFamily();\r\n};\r\n\r\n/**\r\n * Returns whether the Font will be displayed bold or not.\r\n *\r\n * @returns {boolean} - Returns true if the Font is bold\r\n */\r\nFont.prototype.isBold = function() {\r\n\treturn !!this.bold;\r\n};\r\n\r\n/**\r\n * Returns the size of this Font.\r\n *\r\n * @returns {number} - The size of the Font\r\n */\r\nFont.prototype.getSize = function() {\r\n\treturn this.size.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the name of this Font. I.E. Arial, Calibri, etc.\r\n *\r\n * @returns {string} - The name of the Font\r\n */\r\nFont.prototype.getName = function() {\r\n\treturn this.name.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the color reference of this Font.\r\n *\r\n * @returns {string} - The color as HEX string\r\n */\r\nFont.prototype.getColor = function() {\r\n\treturn this.color.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the Font family reference of this Font. The reference is\r\n * defined within the Office Open XML specification.\r\n * 1 : Roman (Times New Roman, SAP-icons)\r\n * 2 : Swiss (Arial, Calibri, Segoe UI, Tahoma, Verdana)\r\n * 3 : Modern\r\n * 4 : Script\r\n * 5 : Decorative\r\n * 6-14 : Reserved for future use\r\n *\r\n * @returns {number} - The Font family ID\r\n */\r\nFont.prototype.getFamily = function() {\r\n\treturn this.family.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * This method can be used to set the Font to bold or not.\r\n *\r\n * @param {boolean} bBold - A boolean value that indicates if the Font should be bold or not\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setBold = function(bBold) {\r\n\tvar boldProperty = 'bold';\r\n\r\n\t/* Early return if bold status is already correct */\r\n\tif (bBold === !!this[boldProperty]) {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tif (bBold) {\r\n\t\tthis.addChild({\r\n\t\t\tid: boldProperty,\r\n\t\t\ttag: 'b'\r\n\t\t});\r\n\t} else {\r\n\t\tthis.remove(boldProperty);\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * This method is used to set the Font family reference for the used font.\r\n *\r\n * @see {@link getFamily}\r\n * @param {number} nFamily - Number that references the Font family\r\n * @returns {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setFamily = function(nFamily) {\r\n\r\n\tif (nFamily > 0 && nFamily < 15) {\r\n\t\tthis.family.valueAttribute.value = nFamily;\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font name to this object.\r\n *\r\n * @param {string} sName - Name of the font i.E. Arial, Calibri, etc.\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setName = function(sName) {\r\n\tif (sName && typeof sName === 'string') {\r\n\t\tthis.name.valueAttribute.value = sName;\r\n\t}\r\n\r\n\t/*\r\n\t * If the font name is Calibri we need to add another child node:\r\n\t *\r\n\t *\t{\r\n\t *\t\ttag: 'scheme',\r\n\t *\t\tattributes: [\r\n\t *\t\t\t{\r\n\t *\t\t\t\tname: 'val',\r\n\t *\t\t\t\tvalue: 'minor'\r\n\t *\t\t\t}\r\n\t *\t\t]\r\n\t *\t}\r\n\t */\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font size to this object.\r\n *\r\n * @param {number} nSize - Textual representation of the font size\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setSize = function(nSize) {\r\n\r\n\t/* Check preconditions */\r\n\tif (typeof nSize !== 'number' || isNaN(nSize) || nSize < 1 || nSize > 96) {\r\n\t\tthrow new Error('The size ' + nSize + ' is not supported.');\r\n\t}\r\n\r\n\tthis.size.valueAttribute.value = nSize;\r\n\r\n\treturn this;\r\n};\r\n\r\nmodule.exports = Font;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/style/Font.js\n// module id = 24\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This Class represents a background fill of cells within the Office\r\n * Open Spreadsheet document. The Fill accepts a configuration object\r\n * which might have either an \"color\" or an \"type\" property.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @param {string} [oData.color] - HEX string defining the colored fill\r\n * @param {string} [oData.type] - Color independent fill type\r\n * @constructor\r\n */\r\nfunction Fill(oData) {\r\n\tXMLNode.call(this, Fill.metadata);\r\n\r\n\tif (oData) {\r\n\t\tif (oData.color) {\r\n\t\t\tthis.setFill(oData.color);\r\n\t\t} else if (oData.type) {\r\n\t\t\tthis.setType(oData.type);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nFill.prototype = Object.create(XMLNode.prototype);\r\nFill.prototype.constructor = Fill;\r\n\r\nFill.DEFAULT_TYPE = 'none';\r\n\r\nFill.metadata = {\r\n\ttag: 'fill',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\ttag: 'patternFill',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'type',\r\n\t\t\t\t\tname: 'patternType',\r\n\t\t\t\t\tvalue: Fill.DEFAULT_TYPE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Fill is equal to the one that was provided.\r\n *\r\n * @param {Fill} oFill - The Fill that gets compared to the current Fill\r\n * @returns {boolean} - Returns true if the compared objects are of the same type and contain the same color fill\r\n */\r\nFill.prototype.equals = function(oFill) {\r\n\tif (!(oFill instanceof Fill)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getType() === oFill.getType()\r\n\t\t&& this.getFill() === oFill.getFill();\r\n};\r\n\r\n/**\r\n * Returns the color of the current Fill.\r\n *\r\n * @returns {string|null} - String containing the color HEX color of the Fill or null of no color is assigned\r\n */\r\nFill.prototype.getFill = function() {\r\n\r\n\t/* The opacity needs to be removed before returning the HEX color */\r\n\treturn this.fill.childs.length ? this.fill.color.rgb.value.substring(2) : null;\r\n};\r\n\r\nFill.prototype.setFill = function(sColor) {\r\n\tthis.reset();\r\n\r\n\tif (sColor && typeof sColor === 'string' && /^[A-Fa-f0-9]{6}$/.test(sColor)) {\r\n\t\tthis.fill.type.value = 'solid';\r\n\r\n\t\t/**\r\n\t\t * Apply the provided color as forground color of the\r\n\t\t * background. We add 'FF' in front of the HEX-color\r\n\t\t * for opacity.\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'fgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'rgb',\r\n\t\t\t\t\tname: 'rgb',\r\n\t\t\t\t\tvalue: 'FF' + sColor\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * Add default background layer which will be used once the\r\n\t\t * foreground color uses transparency\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\ttag: 'bgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'indexed',\r\n\t\t\t\t\tvalue: '64'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns the current Fill type.\r\n *\r\n * @returns {string} - Current Fill type\r\n */\r\nFill.prototype.getType = function() {\r\n\treturn this.fill.type.value;\r\n};\r\n\r\n/**\r\n * Assigns the given type as Fill type. The Fill will be reset to\r\n * default before the type is applied.\r\n *\r\n * @param {string} sType - Type that needs to be assigned\r\n */\r\nFill.prototype.setType = function(sType) {\r\n\tthis.reset();\r\n\r\n\tthis.fill.type.value = sType;\r\n};\r\n\r\n/**\r\n * Resets the current fill to avoid side effects that might occur\r\n * when the fill is modified.\r\n */\r\nFill.prototype.reset = function() {\r\n\tthis.fill.type.value = 'none';\r\n\tthis.fill.childs.length = 0;\r\n};\r\n\r\nmodule.exports = Fill;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/style/Fill.js\n// module id = 25\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This class represents border configuration for Office Open XML Spreadsheets.\r\n * @constructor\r\n */\r\nfunction Border() {\r\n\tXMLNode.call(this, Border.metadata);\r\n}\r\n\r\nBorder.prototype = Object.create(XMLNode.prototype);\r\nBorder.prototype.constructor = Border;\r\n\r\nBorder.metadata = {\r\n\ttag: 'border',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'left'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'right'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'top'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'bottom'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'diagonal'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Border is equal to the given parameter.\r\n *\r\n * @param {Border} oBorder - Border that get's compared to the current one\r\n * @return {boolean} - Returns true if both Borders have the same configuration\r\n */\r\nBorder.prototype.equals = function(oBorder) {\r\n\r\n\t/**\r\n\t * Once it is a Border object we always return true because we\r\n\t * don't provide more than one border type\r\n\t */\r\n\treturn oBorder instanceof Border;\r\n};\r\n\r\nmodule.exports = Border;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/style/Border.js\n// module id = 26\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The NumberFormat class is used to store custom formatting for\r\n * numeric values. In addition to a variety of built-in formats that\r\n * cannot be used as identifier for a particular format, the user can\r\n * create up to 250 different number formats.\r\n *\r\n * (https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3)\r\n *\r\n * @param {Object} oData - Configuration object that is used for initialization\r\n * @param {string} oData.format - Custom format that will be applied\r\n * @constructor\r\n */\r\nfunction NumberFormat(oData) {\r\n\tXMLNode.call(this, NumberFormat.metadata);\r\n\r\n\tthis.format.value = oData && oData.format ? oData.format : NumberFormat.DEFAULT;\r\n}\r\n\r\nNumberFormat.prototype = Object.create(XMLNode.prototype);\r\nNumberFormat.prototype.constructor = NumberFormat;\r\n\r\nNumberFormat.metadata = {\r\n\ttag: 'numFmt',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'formatId',\r\n\t\t\tname: 'numFmtId'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\tname: 'formatCode'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nNumberFormat.BUILTIN_IDS = [ 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15,\r\n\t16, 17, 18, 19, 20, 21, 22, 37, 38, 39, 40, 45, 46, 47, 48, 49 ];\r\nNumberFormat.ID_OFFSET = 166;\r\nNumberFormat.DEFAULT = '#,##0.00';\r\n\r\n/**\r\n * This method returns the ID of this NumberFormat. If there was no\r\n * ID assigned yet, it will return undefined.\r\n *\r\n * @returns {number} - The ID of this NumberFormat\r\n */\r\nNumberFormat.prototype.getId = function() {\r\n\treturn this.formatId.value;\r\n};\r\n\r\n\r\n/**\r\n * Returns the format of this NumberFormat as a string.\r\n *\r\n * @returns {string} - The format template that gets applied\r\n */\r\nNumberFormat.prototype.getFormat = function() {\r\n\treturn this.format.value;\r\n};\r\n\r\n\r\n/**\r\n * Assigns the provided ID to the current NumberFormat.\r\n *\r\n * @param {number|string} sId - The ID of this NumberFormat that can be referenced\r\n */\r\nNumberFormat.prototype.setId = function(sId) {\r\n\tvar iId = typeof sId === 'number' ? sId : parseInt(sId, 10);\r\n\r\n\t/* Checks if NaN, below zero or builtin ID */\r\n\tif (isNaN(iId) || iId < 0 || NumberFormat._isBuiltin(iId)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.formatId.value = sId;\r\n};\r\n\r\n\r\n/**\r\n * Sets a specific format.\r\n *\r\n * @param {string} sFormat - The format that gets applied by this NumberFormat\r\n */\r\nNumberFormat.prototype.setFormat = function(sFormat) {\r\n\tthis.format.value = sFormat;\r\n};\r\n\r\n\r\n/**\r\n * Checks if a given ID is a builtin ID or not. Builtin IDs cannot be used for custom NumberFormats.\r\n *\r\n * @param {number} iId - ID that needs to be checked if it is a builtin ID\r\n *\r\n * @returns {boolean} - Returns true if the provided ID is a builtin ID that cannot be used\r\n * @private\r\n */\r\nNumberFormat._isBuiltin = function(iId) {\r\n\treturn NumberFormat.BUILTIN_IDS.indexOf(iId) > -1;\r\n};\r\n\r\n\r\n/**\r\n * Compares another NumberFormat to the current one. This method will\r\n * match NumberFormat objects by its format regardless of their ID.\r\n *\r\n * @param {NumberFormat} oNumberFormat - The NumberFormat to compare with\r\n * @returns {boolean} - Returns true if the format template is equal to the one from the compared object\r\n */\r\nNumberFormat.prototype.equals = function(oNumberFormat) {\r\n\tif (!(oNumberFormat instanceof NumberFormat)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFormat() === oNumberFormat.getFormat();\r\n};\r\n\r\nmodule.exports = NumberFormat;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/style/NumberFormat.js\n// module id = 27\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This class represents the workbook.xml file within the generated\r\n * Office Open XML Spreadsheet. The workbook is the central element\r\n * of the Office Open XML Spreadsheet that references all the content.\r\n *\r\n * @constructor\r\n */\r\nfunction Workbook() {\r\n\tXMLNode.call(this, Workbook.metadata);\r\n\r\n\t// Adds a default sheet so there is at least on sheet present\r\n\tthis.addSheet('SAP Document Export');\r\n}\r\n\r\nWorkbook.prototype = Object.create(XMLNode.prototype);\r\nWorkbook.prototype.constructor = Workbook;\r\n\r\nWorkbook.metadata = {\r\n\ttag: 'workbook',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'bookViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'workbookView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'yWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowWidth',\r\n\t\t\t\t\t\t\tvalue: '22260'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowHeight',\r\n\t\t\t\t\t\t\tvalue: '12645'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'sheets',\r\n\t\t\ttag: 'sheets'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nWorkbook.prototype.addSheet = function(sName) {\r\n\tvar count = this.sheets.childs.length + 1;\r\n\tvar sheet = new XMLNode({\r\n\t\ttag: 'sheet',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'name',\r\n\t\t\t\tvalue: sName\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'sheetId',\r\n\t\t\t\tvalue: '' + count\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'id',\r\n\t\t\t\tprefix: 'r',\r\n\t\t\t\tvalue: 'rId' + count\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n\r\n\tthis.sheets.addChild(sheet);\r\n};\r\n\r\nmodule.exports = Workbook;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/src/objects/Workbook.js\n// module id = 28\n// module chunks = 0"],"sourceRoot":""}